%{

open Ast

let private spans = ref []

let result() = List.rev !spans

let reset() = spans := []

let mkKeyword (ps : Position , pe : Position) = Keyword(ps.Column, pe.Column - ps.Column)

let inSpec = ref false

%}

// The start token becomes a parser function in the compiled code:
%start start

%token <Position> OPENSPEC
%token <Position> LPAREN
%token <Position> RPAREN
%token <Position*Position> KEYWORD
%token <Position*Position> GUARDED
%token EOF


// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type < unit > start

%%

// These are the rules of the grammar along with the F# code of the 
// actions executed as rules are reduced.  In this case the actions 
// produce data using F# data construction terms.
start:  Program                                       { () }

Program : 
    | NestedParens EOF                                { () }

NestedParens :
    | IgnoredKeywords                                 { () } 
    | NestedParens Parens IgnoredKeywords             { () }

Parens :
    | LPAREN NestedParens RPAREN                      { () }
    | OPENSPEC KeywordOpt NestedParensInSpec RPAREN   { spans := Spec($1.Column, $4.Column - $1.Column + 1) :: !spans }

NestedParensInSpec :
    | Keywords                                        { () } 
    | NestedParensInSpec ParensInSpec Keywords        { () }

ParensInSpec :
    | LPAREN NestedParensInSpec RPAREN                { () }
    | OPENSPEC KeywordOpt NestedParensInSpec RPAREN   { spans := Spec($1.Column, $4.Column - $1.Column + 1) :: !spans }

IgnoredKeywords  :
    |                                                 { () }
    | KEYWORD IgnoredKeywords                         { () }
    | GUARDED IgnoredKeywords                         { spans := (mkKeyword $1) :: !spans }

Keywords  :
    |                                                 { () }
    | KEYWORD Keywords                                { spans := (mkKeyword $1) :: !spans }
    | GUARDED Keywords                                { spans := (mkKeyword $1) :: !spans }


KeywordOpt :
    |                                           { () }
    | KEYWORD                                   { spans := (mkKeyword $1) :: !spans }
