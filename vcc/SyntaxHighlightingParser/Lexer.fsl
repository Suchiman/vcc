{
module SyntaxHighlighting.Lexer
open System
open Microsoft.FSharp.Text.Lexing
open SyntaxHighlighting.FsParser
}


// Base regular expressions
let whitespace = [' ' '\t' '\r' '\n']

let digit = ['0'-'9']
let idbeg = (['A' - 'Z'] | ['a'-'z'])
let idbody = (idbeg | digit | '_')

let id = idbeg idbody* | '_' idbody+

let keyword = 
  "atomic" | 
  "assume" | 
  "assert" | 
  "axiom" | 
  "decreases" | 
  "ensures" | 
  "group" |
  "ghost" |
  "invariant" |
  "logic" |
  "out" |
  "requires" |
  "reads" |
  "unwrap" |
  "unwrapping" |
  "unchecked" |
  "wrap" |
  "writes" |
  // macros defined in vccp.h:
  "maintains" |
  "always" |
  "updates" |
  "out_param" |
  "returns" |
  "level"


let guardedKeyword = 
  "\\result" |
  "\\lambda" |
  "\\forall" |
  "\\exists" |
  "\\union" |
  "\\inter" |
  "\\this" |
  "\\diff" |
  "\\old" |
  "\\in0" |
  "\\is" |
  "\\in"

rule tokenize = parse

| keyword                               { KEYWORD(lexbuf.StartPos, lexbuf.EndPos) }
| guardedKeyword                        { GUARDED(lexbuf.StartPos, lexbuf.EndPos) }

| '_' '('                               { OPENSPEC(lexbuf.StartPos) }
| '('                                   { LPAREN(lexbuf.StartPos) }
| ')'                                   { RPAREN(lexbuf.StartPos) }

| id                                    { tokenize lexbuf }
| whitespace+                           { tokenize lexbuf }

| "'" ([^ '\\'] | '\\' [^ '\'']+ ) "'"  { tokenize lexbuf }
| '"' ([^ '\\' '"'] | '\\' _)* '"'      { tokenize lexbuf }

| "//" [^ '\r' '\n']*                   { tokenize lexbuf }
| "/*" ([^ '*'] | '*' [^ '/'])* "*/"    { tokenize lexbuf }
| eof                                   { EOF }
| _                                     { tokenize lexbuf }
