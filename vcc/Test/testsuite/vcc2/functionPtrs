#include <vcc.h>

typedef int (*TF)(int x)
  requires(x > 1)
  ensures(result > 0);

int bar(int x)
  requires(x > 0)
  ensures(result > 1);

void foo() {
  TF p = &bar;
  int res = p(3);
  assert(res > 0);
}
`
Verification of foo succeeded.
Verification of $fnptr_bar_to_fnptr#1 succeeded.
`
#include <vcc.h>

typedef int (*TF)(int x)
  requires(x > 1)
  ensures(result > 0);

int bar(int x)
  requires(x > 2)
  ensures(result > 1);

void foo() {
  TF p = &bar;
  int res = p(3);
  assert(res > 0);
}
`
Verification of foo succeeded.
Verification of $fnptr_bar_to_fnptr#1 failed.
testcase(12,10) : error VC9502: Call '&bar' did not verify.
testcase(8,14) : error VC9599: (related information) Precondition: 'x > 2'.
`
#include <vcc.h>

typedef int (*TF)(int x)
  requires(x > 1)
  ensures(result > 2);

int bar(int x)
  requires(x > 0)
  ensures(result > 1);

void foo() {
  TF p = &bar;
  int res = p(3);
  assert(res > 0);
}
`
Verification of foo succeeded.
Verification of $fnptr_bar_to_fnptr#1 failed.
testcase(12,10) : error VC9501: Post condition 'result > 2' did not verify.
testcase(5,13) : error VC9599: (related information) Location of post condition.
`
#include <vcc.h>

typedef int (*TF)(int x)
  requires(x > 1)
  ensures(result > 0);

int bar(int x)
  requires(x > 0)
  ensures(result > 1);

void foo() {
  TF p;
  int res = p(3);
  assert(res > 0);
}
`
Verification of foo failed.
testcase(13,13) : error VC8504: Assertion 'p is valid function pointer' did not verify.
`
#include <vcc.h>

typedef int (*TF)(int x)
  requires(x > 1)
  ensures(result > 0);

int bar(int x)
  requires(x > 0)
  ensures(result > 1);

void foo() {
  TF p = &bar;
  int res = p(-1);
  assert(res > 0);
}
`
Verification of foo failed.
testcase(13,13) : error VC9502: Call 'p(-1)' did not verify.
testcase(4,14) : error VC9599: (related information) Precondition: 'x > 1'.
Verification of $fnptr_bar_to_fnptr#1 succeeded.
`
#include <vcc.h>

typedef int (*TF)(int x)
  requires(x > 1)
  ensures(result > 0);

int bar(int x)
  requires(x > 0)
  ensures(result > 1);

void foo() {
  TF p = &bar;
  int res = p(3);
  assert(res > 1);
}
`
Verification of foo failed.
testcase(14,12) : error VC9500: Assertion 'res > 1' did not verify.
Verification of $fnptr_bar_to_fnptr#1 succeeded.
`
#include <vcc.h>

typedef int (*i2i)(int);

void foo(i2i f1, i2i f2)
  requires(mutable(f1) && mutable(f2) && typed(f1) && typed(f2))
{
  int a,b;
  a = f1(1);
  b = f2(1);
  // this unfortunately relies on the fact that we generate pure function for i2i
  assert(f1 == f2 ==> a == b);
}

void foo2(i2i f1, i2i f2)
  requires(mutable(f1) && mutable(f2) && typed(f1) && typed(f2))
{
  int a,b;
  assert(f1(1) == f2(1)); // error
}

void foo3(i2i f1, i2i f2)
  requires(mutable(f1) && mutable(f2) && typed(f1) && typed(f2))
{
  int a,b;
  assert(f1 == f2 ==> f1(1) == f2(1)); // OK
}
`
testcase(19,12) : error VC9635: function 'fnptr#1' used in pure context, but not marked with 'ispure'
testcase(19,21) : error VC9635: function 'fnptr#1' used in pure context, but not marked with 'ispure'
testcase(26,25) : error VC9635: function 'fnptr#1' used in pure context, but not marked with 'ispure'
testcase(26,34) : error VC9635: function 'fnptr#1' used in pure context, but not marked with 'ispure'
`
#include <vcc.h>

void foo() { }

void bar() { }

void baz() {
  void *f1 = &foo;
  void *f2 = &foo;
  void *b = &bar;
  assert(f1 == f2);
  assert(b != f1);
}

typedef void (*c1)(int x)
  requires(x > 0);

typedef void (*c2)(int x)
  requires(x > 1);

void f1(int x) {}
void f2(int x) {}

void baz2()
{
  c1 pf1 = &f1;
  c1 pf2 = &f2;
  c2 xf1 = &f1;
  c2 xf2 = &f2;

  assert(pf1 == xf1);
  assert(pf1 != pf2);
  assert(pf1 != xf2);
}
`
Verification of foo succeeded.
Verification of bar succeeded.
Verification of baz succeeded.
Verification of f1 succeeded.
Verification of f2 succeeded.
Verification of baz2 succeeded.
Verification of $fnptr_f2_to_fnptr#2 succeeded.
Verification of $fnptr_f1_to_fnptr#2 succeeded.
Verification of $fnptr_f2_to_fnptr#1 succeeded.
Verification of $fnptr_f1_to_fnptr#1 succeeded.
`
