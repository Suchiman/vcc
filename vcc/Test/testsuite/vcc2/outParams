#include <vcc.h>

void foo(spec(out int o)) 
  ensures(o == 5)
{
  o = 5;
}		

void bar() {
  spec(int p;)
  foo(spec(out p));
  assert(p == 5);
}

`
Verification of foo succeeded.
Verification of bar succeeded.
`
#include <vcc.h>

int foo(spec(out int o)) 
  ensures(o == 5)
  ensures(result == 6)
{
  o = 5;
  return 6;
}		

void bar() {
  spec(int p;)
  int r;
  r = foo(spec(out p));
  assert(p == 5);
  assert(r == 6);
}

`
Verification of foo succeeded.
Verification of bar succeeded.
`
#include <vcc.h>

int foo(int i spec(out int o)) 
  ensures(o == i)
  ensures(result == 6)
{
  o = i;
  return 6;
}		

void bar() {
  spec(int p;)
  int r;
  r = foo(5 spec(out p));
  assert(p == 5);
  assert(r == 6);
}

`
Verification of foo succeeded.
Verification of bar succeeded.
`
#include <vcc.h>

int foo(spec(out int o) spec(out int o1)) 
  ensures(o == 5)
  ensures(o1 == 7)
  ensures(result == 6)
{
  o = 5;
  o1 = 7;
  return 6;
}		

void bar() {
  spec(int p;)
  spec(int p1;)
  int r;
  r = foo(spec(out p) spec(out p1));
  assert(p == 5);
  assert(p1 == 7);
  assert(r == 6);
}

`
Verification of foo succeeded.
Verification of bar succeeded.
`

#include <vcc.h>

void foo(spec(out int o)) 
  ensures(o == 5)
{
  o = 5;
}

void bar(spec(out int o)) 
  ensures(o == 5)
{
  foo(spec(out o));
}

void baz() {
  spec(int p;)
  bar(spec(out p));
  assert(p == 5);
}

`
Verification of foo succeeded.
Verification of bar succeeded.
Verification of baz succeeded.
`
#include <vcc.h>

void foo(spec(out int o));

void bar() {
  foo(spec(out 1));
}

`
testcase(6,27) : error VC0000: The left-hand side of an assignment must be a variable, property or indexer.
`

#include <vcc.h>

void foo(spec(out int o)) 
  ensures(o == 5)
{
}

`
Verification of foo failed.
testcase(7,1) : error VC9501: Post condition 'o == 5' did not verify.
testcase(5,13) : error VC9599: (related information) Location of post condition.
`
#include <vcc.h>

void foo(int * x spec(out int o))
  ensures(o == 5)
  out_param(x)
{
speconly(  o = 5; )
}

void bar()
{
  int x;
  spec(int o;)

  foo(&x spec(out o));
}
`
Verification of foo succeeded.
Verification of bar succeeded.
`
#include <vcc.h>

void foo(spec(out int i))
  requires(i == 5) {
}

void bar(int i) {
  foo(spec(out i));
}
`
testcase(4,14) : error VC0000: Reference to out parameter 'i' not allowed in this context.
`

#include <Vcc2.h>

void foo(spec(out int i)) 
  ensures(i == 17)
{
  speconly(i = 17;)
}

void bar(spec(int i)) {
  foo(spec(out i));
  assert(i == 17);
}
`
Verification of foo succeeded.
Verification of bar succeeded.
`#include <vcc.h>

void foo(int x, int y spec(out int o1) spec(out int o2))
  ensures(o1 == x && o2 == y)
{
  speconly(o1 = x; o2 = y; )
}

void bar()
{
  spec(int z;)
  foo(1, 2 spec(out z) spec(out z));
}
`
testcase(12,54) : error VC9676: duplicate out parameter 'z'
`
#include <vcc.h>

int foo(int x, int y spec(out int o1) spec(out int o2))
  ensures(o1 == x && o2 == y)
{
  speconly(o1 = x; o2 = y; )
}

void bar()
{
  spec(int z;)
  spec(int y;)
  z = foo(1, 2 spec(out z) spec(out y));
}
`
testcase(13,36) : error VC9676: duplicate out parameter 'z'
`
#include <vcc.h>

void foo(spec(out int a))
  ensures(a == 17);

void bar() {
  spec(int a;)
  spec(int ^b = &a;)
  int c;
  
  foo(spec(out a));
  assert(a == 17);
}
`
Verification of bar succeeded.
`
#include "vcc.h"

void foo(spec(out int a)) {
  block 
    ensures(a == 10)
  {
    speconly(a = 10;)
    assert(a == 10);
  }
  assert(a == 10);
}
`
Verification of foo succeeded.
Verification of foo#block#0 succeeded.
`
#include "vcc.h"
// This example should yield a warning / error
int foo(spec(out int a));
void bar() {
  int x;
  foo(spec(out x));
}
`
testcase(6,27) : warning VC9304: [possible unsoundness]: physical location passed as out parameter
Verification of bar succeeded.
`

int foo(__specification int a);
void bar() {
  __specification int x;
  foo(__specification out x);
}


int fooOut(__specification out int a);
void barOut() {
  __specification int x;
  fooOut(__specification x);
}
`
testcase(5,3) : error VC0000: Argument '1' should not be passed with the 'out' keyword.
testcase(12,3) : error VC0000: Argument '1' must be passed with the 'out' keyword.
`