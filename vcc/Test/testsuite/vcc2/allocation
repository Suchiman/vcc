`/newsyntax
#include <stdlib.h>
#include "vcc.h"

typedef unsigned __int8 byte;

typedef struct C {
   int dummy;
} C;

typedef struct B {
    C c;
} B;

typedef struct A1 {
    B b;
} A1;

typedef _(dynamic_owns) struct gA {
    A1 g[10]; 
} gA;

void withSpecAlloc ()
{
    _(ghost gA^ a;)
    _(ghost a = \alloc<gA>();)
    _(assert \mutable(&a->g[0]))
    _(assert \mutable(&a->g[0].b))
    _(assert \mutable(&a->g[0].b.c)) 
}

void withMalloc ()
{
    gA* a = (gA*) malloc(sizeof(gA));
    if (a != NULL) {
      _(assert \mutable(&a->g[0])) 
      _(assert \mutable(&a->g[0].b)) 
      _(assert \mutable(&a->g[0].b.c))
    }
}

void withStackAlloc ()
{
    gA g;
    gA* a = &g;
    _(assert \mutable(&a->g[0]))
    _(assert \mutable(&a->g[0].b))
    _(assert \mutable(&a->g[0].b.c))
}
`
Verification of withSpecAlloc succeeded.
Verification of withMalloc succeeded.
Verification of withStackAlloc succeeded.
`
`/newsyntax
#include <stdlib.h>
#include "vcc.h"

typedef unsigned __int8 byte;

typedef struct C { int dummy; } C;

typedef struct B { C c; } B;

typedef struct A1 { B b; } A1;

typedef struct gA { A1 g[10]; } gA;

void two() {
    _(ghost gA^ a;)
    _(ghost a = \alloc<gA>();)
    _(ghost a->g[0].b.c.dummy = 42;)
}

void three() {
    gA* a;
    a = (gA*) malloc(sizeof(gA));
    if (a != NULL) a->g[0].b.c.dummy = 42;
}
`
Verification of two succeeded.
Verification of three succeeded.
`