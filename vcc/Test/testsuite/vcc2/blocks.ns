`/newsyntax
#include <vcc.h>

void foo() 
	{
  int i = 5;
  int j = 3;
  
    _(requires i <= 5 && j == 3)
    _(ensures i == \old(i) + 1)
  {
    i++;
  }
  _(assert i == 6 && j == 3)
}	

`
Verification of foo succeeded.
Verification of foo#block#0 succeeded.
`
`/newsyntax
#include <vcc.h>

void foo(int *i) 
  _(writes i)
  _(ensures *i == 10)
{
  int j = 5;
  *i = 9;
  
    _(writes i)
    _(requires *i < 10 && j < 10)
    _(ensures *i == \old(*i) + 1 && j == \old(j + 1))
  {
    (*i)++; 
    j++;
  }
  _(assert j == 6)
}
`
Verification of foo succeeded.
Verification of foo#block#0 succeeded.
`
`/newsyntax
#include <vcc.h>

void foo() 
	{
  int i = 5;
  int j = 3;
  
    _(requires i <= 5 && j == 3)
    _(ensures i == \old(i) + 1 && j == 3)
  {
    i++;
     
      _(requires j == 3)
      _(ensures j == 4)
    {
      j++;
    }
    j--;
  }
  _(assert i == 6 && j == 3)
}	

`
Verification of foo succeeded.
Verification of foo#block#0 succeeded.
Verification of foo#block#0#0 succeeded.
`
`/newsyntax
#include "vcc.h"

void foo(_(out int a))
  _(ensures a == 10);

void bar() {
  _(ghost int x)
   
    _(ensures x == 10)
  {
    foo(_(out x));
    _(assert x == 10)
  }
  _(assert x == 10)
}
`
Verification of bar succeeded.
Verification of bar#block#0 succeeded.
`
`/newsyntax
#include <vcc.h>

int foo(int i)
  _(requires i < 10)
{
  i++;
  
    _(requires i < 11)
	_(ensures \old(i) == 0 ==> i == 0)
	_(ensures \old(i) != 0 ==> i == \old(i) + 1)
  {
      if(i)
        i++;
  }

  return i;
}
`
Verification of foo succeeded.
Verification of foo#block#0 succeeded.
`
`/newsyntax
#include <vcc.h>

typedef _(claimable) struct _a{
    int dummy;
    _(ghost int spec_dummy)
    _(invariant dummy == spec_dummy)
} a;

void foo(a* p)
_(requires \wrapped(p))
_(writes p)
{
  
    _(requires \wrapped(p))
    _(writes p)
  {
   _(ghost \claim c)
    _(ghost c = \make_claim({p}, p->\consistent))
  }
}
`
Verification of _a#adm succeeded.
Verification of foo succeeded.
Verification of foo#block#0 succeeded.
`
`/newsyntax
#include <vcc.h>

#define NULL    ((void *) 0)

struct A { int *x; };

void foo(struct A* p)
_(requires p->x != NULL)
{
    
    _(requires p->x != NULL)
    {;
    }        
}
`
Verification of foo succeeded.
Verification of foo#block#0 succeeded.
`
`/newsyntax
#include <vcc.h>

typedef struct _A{
    int a;
} A, *PA;

void foo(PA p _(out \claim c))
_(ensures \wrapped(c) && \fresh(c))
_(writes p)
;

void test(PA p, PA p1)
_(requires p != p1)
 _(writes p)
 _(writes p1)
{
_(ghost \claim c)
_(ghost \claim c1)


 // writes(&c)
 _(requires p != p1)
 _(ensures \wrapped(c))
 _(ensures \wrapped(c1))
 _(writes p)
 _(writes p1)
{
   foo(p _(out c));
   _(assert \active_claim(c))

   foo(p1 _(out c1));
   _(assert \active_claim(c))
   _(assert \wrapped(c))
   _(assert \wrapped(c1))
}
}
`
Verification of test succeeded.
Verification of test#block#0 succeeded.
`
`/newsyntax
#include <vcc.h>

typedef struct _A{
    int a;
} A, *PA;

void foo(PA p _(out \claim c))
_(ensures \wrapped(c) && \fresh(c))
_(writes p)
;

void test(PA p, PA p1)
_(requires p != p1)
 _(writes p)
 _(writes p1)
{
_(ghost \claim c)
_(ghost \claim c1)


 // writes(&c)
 _(requires p != p1)
 _(ensures \wrapped(c))
 _(writes p)
 _(writes p1)
{
   foo(p _(out c));
   _(assert \active_claim(c))

   foo(p1 _(out c1));
   _(assert \active_claim(c))
   _(assert \wrapped(c))
}
}
`
Verification of test succeeded.
Verification of test#block#0 succeeded.
`
`/newsyntax
#include <vcc.h>

void bar(int *p)
  _(maintains \mutable(p)) 
  _(writes p)
{
  *p = 5;
}

void foo(int x) {
  int i = 1;  
  if (x > 0) {
     
      _(requires i == 1)
    {
      int j;
      bar(&j);
    }
  }
}
`
Verification of bar succeeded.
Verification of foo succeeded.
Verification of foo#block#0 succeeded.
`
`/newsyntax
#include <vcc.h>

void foo(int x) {
  int i = 1;  
  if (x > 0) {
     
      _(requires i == 1)
    {
      return;
    }
  }
  _(assert x <= 0)
}
`
testcase(9,7) : error VC9705: Block with explicit contract must not contain return statement.
`
`/newsyntax
#include <vcc.h>

void bar(int *p) 
  _(writes p)
{
  *p = 5;
}

void foo(int x) {
  int i = 1;  
  int j;
  int k;
  int l;
  if (x > 0) {
     
      _(requires i == 1)
      _(ensures i == 2)
      _(writes &l,&j)
    {
      bar(&j);
      bar(&l);
      i = 2;
    }
     
      _(requires i == 2)
      _(ensures i == 3)
      _(writes &l,&k)
    {
      bar(&k);
      bar(&l);
      i = 3;
    }
  }
}
`
Verification of bar succeeded.
Verification of foo succeeded.
Verification of foo#block#0 succeeded.
Verification of foo#block#1 succeeded.
`
`/newsyntax
#include <vcc.h>

void bar(int *p)
  _(writes p)
{
  *p = 5;
}

void foo(int x) {
  int i = 1;
  int j;
  int k;
  int l;
  if (x > 0) {
    
      _(requires i == 1)
      _(ensures i == 2)
      _(writes &l)
    {
      bar(&j);
      bar(&l);
      i = 2;
    }
  }
}
`
Verification of bar succeeded.
Verification of foo succeeded.
Verification of foo#block#0 failed.
testcase(20,7) : error VC8510: Assertion '&j is writable in call to bar(&j)' did not verify.
`
`/newsyntax
#include <vcc.h>

int foo(int i)
  _(requires i < 10)
  _(ensures \result == i + 4)
{
  i++;
    _(requires i < 11)
    _(ensures i == \old(i) + 3)
  {
    i++;
      _(requires i < 12)
      _(ensures i == \old(i) + 1)
    {
      i++;
    }
      _(requires i < 13)
      _(ensures i == \old(i) + 1)
    {
      i++;
    }
  }
  _(assert i < 14)
  return i;
}
`
Verification of foo succeeded.
Verification of foo#block#0 succeeded.
Verification of foo#block#0#0 succeeded.
Verification of foo#block#0#1 succeeded.
`
