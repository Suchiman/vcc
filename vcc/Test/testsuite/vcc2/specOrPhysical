#include "vcc.h"

typedef unsigned __int64 uint64_t;

void foo() {
    uint64_t a, *b;
    a = (uint64_t) b;
    assert(a >= 0);
}
`
Verification of foo succeeded.
`
#include "vcc.h"

struct S {
  int a;
  spec(int b;)
};

void foo() {
  struct S s;
  struct S *p = &s;
  assert(typed_phys(p));
  assert(typed_phys(&p->a));
  assert(typed_spec(&p->b));
}
`
Verification of foo succeeded.
`
#include "vcc.h"

struct S {
  int a;
  spec(int b;)
};

void foo(struct S *p) 
  requires(wrapped(p))
{
  assert(typed(p));
  assert(typed_phys(p));
}

spec (
void bar(struct S ^p) 
  requires(wrapped(p))
{
  assert(typed(p));
  assert(typed_spec(p));
}
)
`
Verification of foo succeeded.
Verification of bar succeeded.
`
#include "vcc2test.h"
void foo()
{
  spec(char *xyz[char*];)
  spec(int foo[int*];)
  char arr[10];
  int x = 20;
  char *p = (char *)malloc(10);
  assume(p != NULL);
  speconly(xyz = lambda(char *c; c != 0; c + 1);)
  assert(typed(&arr));
  assert(typed(&arr[1]));
  assert(typed_phys(&arr));
  assert(typed_phys(&arr[1]));
  assert(typed(&p));
  assert(typed(&p[1]));
  assert(typed_phys(&p));
  assert(typed_phys(&p[9]));
}
`
Verification of foo succeeded.
`
#include <vcc.h>

struct S {
  int a;
};

struct T {
  struct S *p;
  spec(struct S ^q;)
  invariant(keeps(p,q))
};

void foo(struct T *t) 
  writes(t)
  maintains(wrapped(t))
{
  expose(t) {
    assert(typed(t->p));
    assert(typed_phys(t->p));
    assert(typed(t->q));
    assert(typed_spec(t->q));
  }
}
`
Verification of T#adm succeeded.
Verification of foo succeeded.
`#include <vcc.h>

struct A {
  int x;
};

struct B {
  int dummy;
  spec( struct A ^a; )

  invariant(typed_spec(this) && a->x == 12)
};


void foo()
{
spec( struct B ^b; )
speconly(
  b = spec_malloc<struct B>();
  b->a = spec_malloc<struct A>();
  b->a->x = 12;
  wrap(b);
)
}

struct B2 {
  int dummy;
  spec( struct A ^a; )

  invariant(typed_spec(this) && a->x == 12)
};

isadmissibilitycheck
void adm_B2(struct B2* x)
{
  havoc_others(x);
}
`
Verification of B#adm failed.
testcase(11,43) : error VC8012: invariant(a->x == 12) of B is not admissible.
Verification of B2#adm succeeded.
Verification of foo succeeded.
Verification of adm_B2 failed.
testcase(37,1) : error VC8012: invariant(a->x == 12) of B2 is not admissible.
`
#include <vcc.h>

struct vcc(claimable) S {
  int a;
};

void foo(struct S *s)
  writes(extent(s))
{
  claimp(c;)
  wrap(s);
  speconly(c = claim(s, true);)
  assert(typed_spec(c));
}
`
Verification of foo succeeded.
`
