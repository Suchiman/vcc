`/newsyntax
#include "vcc.h"

typedef unsigned __int64 uint64_t;

void foo() {
    uint64_t a, *b;
    a = (uint64_t) b;
    _(assert a >= 0)
}
`
Verification of foo succeeded.
`
`/newsyntax
#include "vcc.h"

struct S {
  int a;
  _(ghost int b;)
};

void foo() {
  struct S s;
  struct S *p = &s;
  _(assert (p->\valid && !\ghost(p)))
  _(assert ((&p->a)->\valid && !\ghost(&p->a)))
  _(assert ((&p->b)->\valid && \ghost(&p->b)))
}
`
Verification of foo succeeded.
`
`/newsyntax
#include "vcc.h"

struct S {
  int a;
  _(ghost int b;)
};

void foo(struct S *p) 
  _(requires \wrapped(p))
{
  _(assert p->\valid)
  _(assert (p->\valid && !\ghost(p)))
}

_(ghost 
void bar(struct S ^p) 
  _(requires \wrapped(p))
{
  _(assert p->\valid)
  _(assert (p->\valid && \ghost(p)))
})
`
Verification of foo succeeded.
Verification of bar succeeded.
`
`/newsyntax
#include "vcc2test.h"
void foo()
{
  _(ghost char *xyz[char*];)
  _(ghost int foo[int*];)
  char arr[10];
  int x = 20;
  char *p = (char *)malloc(10);
  _(assume p != NULL)
  _(ghost xyz = (\lambda char *c; c + 1);)
  _(assert (&arr)->\valid)
  _(assert (&arr[1])->\valid)
  _(assert ((&arr)->\valid && !\ghost(&arr)))
  _(assert ((&arr[1])->\valid && !\ghost(&arr[1])))
  _(assert (&p)->\valid)
  _(assert (&p[1])->\valid)
  _(assert ((&p)->\valid && !\ghost(&p)))
  _(assert ((&p[9])->\valid && !\ghost(&p[9])))
}
`
Verification of foo succeeded.
`
`/newsyntax
#include <vcc.h>

struct S {
  int a;
};

struct T {
  struct S *p;
  _(ghost struct S ^q;)
  _(invariant \mine(p,q))
};

void foo(struct T *t) 
  _(writes t)
  _(maintains \wrapped(t))
{
  _(unwrapping t) {
    _(assert (t->p)->\valid)
    _(assert ((t->p)->\valid && !\ghost(t->p)))
    _(assert (t->q)->\valid)
    _(assert ((t->q)->\valid && \ghost(t->q)))
  }
}
`
Verification of T#adm succeeded.
Verification of foo succeeded.
`
`/newsyntax
#include <vcc.h>

struct A {
  int x;
};

struct B {
  int dummy;
  _(ghost  struct A ^a;)

  _(invariant (\this->\valid && \ghost(\this)) && a->x == 12)
};


void foo()
{
_(ghost  struct B ^b;)
_(ghost {
  b = \alloc<struct B>();
  b->a = \alloc<struct A>();
  b->a->x = 12;
  _(wrap b)})
}

struct B2 {
  int dummy;
  _(ghost  struct A ^a;)

  _(invariant (\this->\valid && \ghost(\this)) && a->x == 12)
};

_(admissibility)
void adm_B2(struct B2* x)
{
  _(havoc_others x)
}
`
Verification of B#adm failed.
testcase(11,65) : error VC8012: invariant(a->x == 12) of B is not admissible.
Verification of B2#adm succeeded.
Verification of foo succeeded.
Verification of adm_B2 failed.
testcase(36,1) : error VC8012: invariant(a->x == 12) of B2 is not admissible.
`
`/newsyntax
#include <vcc.h>

_(claimable) struct S {
  int a;
};

void foo(struct S *s)
  _(writes \extent(s))
{
  _(ghost \claim c;)
  _(wrap s)
  _(ghost c = \make_claim({s}, \true);)
  _(assert (c->\valid && \ghost(c)))
}
`
Verification of foo succeeded.
`
`/newsyntax
#include <vcc.h>

struct S {
  int a;
};

_(ghost 
void foo(_(out struct S ^p))
  _(ensures \wrapped(p))
{
  struct S ^result = \alloc<struct S>();
  _(wrap result)
  p = result;
})

_(ghost 
struct S ^foo1()
  _(ensures \wrapped(\result))
{
  struct S ^result = \alloc<struct S>();
  _(wrap result)
  return result;
})

_(ghost 
void bar() {
  struct S ^x;
  foo(_(out x));
  _(assert \wrapped(x))
  _(assert x->\valid)
  _(assert (x->\valid && \ghost(x)))
})

_(ghost 
void bar1() {
  struct S ^x;
  x = foo1();
  _(assert \wrapped(x))
  _(assert x->\valid)
  _(assert (x->\valid && \ghost(x)))
})
`
Verification of foo succeeded.
Verification of foo1 succeeded.
Verification of bar succeeded.
Verification of bar1 succeeded.
`
`/newsyntax
#include "vcc.h"

struct S {
    int a;
    int b;
};

void foo(struct S *s)
    _(requires \wrapped(s))
{
    _(assert (&s->b)->\valid && ((&s->b)->\valid && !\ghost(&s->b)))
}

`
Verification of foo succeeded.
`
`/newsyntax
#include <vcc.h>

struct S {
  int a;
};

_(ghost void bar(struct S *p) 
  _(requires p->\valid)
  _(ensures (p->\valid && !\ghost(p)))
{
  _(assert (p->\valid && !\ghost(p)))
})

_(ghost void foo(\object o) 
  _(requires \wrapped(o))
  _(requires o \is struct S)
  _(ensures (o->\valid && !\ghost(o)))
{
  struct S *p;
  _(assert o->\valid)
  p = (struct S *)o;
  bar(p); 
})
`
Verification of bar succeeded.
Verification of foo failed.
testcase(21,19) : error VC8535: Assertion 'o is in physical pointer range (in cast)' did not verify.
`
`/newsyntax
#include <vcc.h>

struct S {
  int a;
  _(as_array) int c[5];
};

struct T {
  int a;
  int c[5];
};

void foo(struct S *s)
  _(requires \wrapped(s))
{
  _(assert s->\valid)
  _(assert (s->\valid && !\ghost(s)))
  _(assert ((&s->a)->\valid && !\ghost(&s->a)))
  _(assert ((&s->c[4])->\valid && !\ghost(&s->c[4])))
}

void bar(struct T *s)
  _(requires \wrapped(s))
{
  _(assert s->\valid)
  _(assert (s->\valid && !\ghost(s)))
  _(assert ((&s->a)->\valid && !\ghost(&s->a)))
  _(assert ((&s->c[4])->\valid && !\ghost(&s->c[4])))
}
`
Verification of foo succeeded.
Verification of bar succeeded.
`
`/newsyntax
#include <vcc.h>

void foo() {
  _(ghost int a[5];)
  _(ghost int ^p = &a[0];)
  _(assert (p->\valid && \ghost(p)))
} 
`
Verification of foo succeeded.
`
`/newsyntax
#include<vcc.h>

typedef struct  c{
int b;
}c;

typedef _(dynamic_owns) struct d{
    c *cc;
    _(ghost 
        c arr[3];)
    c iarr[3];
    _(invariant \mine(cc))
}d;

void foo(d *dd)
_(requires \wrapped(dd))
_(writes dd)
_(requires \forall int i; i >= 0 && i < 3 ==> &dd->arr[i] \in dd->\owns)
_(requires \forall int i; i >= 0 && i < 3 ==> &dd->iarr[i] \in dd->\owns)
{
    _(unwrap dd)
    
    _(ghost dd->\owns =  dd->\owns \diff \array_members(dd->iarr, 3));
    _(ghost dd->\owns =  dd->\owns \diff \array_members(dd->arr, 3));
}
`
Verification of d#adm succeeded.
Verification of foo succeeded.
`