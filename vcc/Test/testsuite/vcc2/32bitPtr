`/ps:32
#include <vcc.h>

void foo() { 
  assert(sizeof(int*) == sizeof(int));
  assert(sizeof(long*) == sizeof(long));
  assert(sizeof(int) == sizeof(long));
}
`
Verification of foo succeeded.
`
`/ps:32

#include <vcc.h>

struct S {
  int *p;
  int i;
};

void foo(struct S *x) { 
  size_t s = sizeof(struct S);
  assert(s == 8);
  assert((char *)(&x->i) == ((char *)x) + 4);
}
`
Verification of foo succeeded.
`
`/ps:32

#include <vcc.h>

struct S {
  long *p;
  long i;
};

void foo(struct S *x) { 
  size_t s = sizeof(struct S);
  assert(s == 8);
  assert((char *)(&x->i) == ((char *)x) + 4);
}
`
Verification of foo succeeded.
`
`/ps:32

#include <vcc.h>

struct S {
  int *p;
  int *q;
};

void foo(struct S *x) { 
  int **barInt = &x->p;
  assert(barInt == x);
  barInt++;
  assert(barInt == &x->q);
  assert(sizeof(x) == 4);
  assert(sizeof(x->p) == 4);
  assert(sizeof(barInt) == 4);
}
`
Verification of foo succeeded.
`
`/ps:32

#include <vcc.h>

struct S {
  char p[3];
  // one padding byte here
  int *q;
};

void foo(struct S *x) { 
  // check alignment
  assert(sizeof(struct S) == 8);
  assert(sizeof(x->q) == 4);
  assert((char*)&x->q - (char*)x == 4);
}
`
Verification of foo succeeded.
`