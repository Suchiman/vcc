`/newsyntax
#include <vcc.h>

struct S {
  int a;
  int b;
};

_(ghost bool _(pure) swapped(struct S *s, \state s1, \state s2)
  _(returns \at(s1, s->a) == \at(s2, s->b) && \at(s2, s->a) == \at(s1, s->b));)

void foo(struct S *s)
  _(requires \mutable(s))
  _(writes \extent(s))
{
  _(ghost \state s0 = \now();)
  _(ghost \state s1;)
  int tmp = s->a;
  s->a = s->b;
  s->b = tmp;
  _(ghost s1 = \now();)
  _(assert \at(s0, s->a) == \at(s1, s->b))
  _(assert \at(s0, s->b) == \at(s1, s->a))
  _(assert swapped(s, s0, s1))
}
`
Verification of foo succeeded.
`
`/newsyntax
#include <vcc.h>

void foo(int i) {
  _(assert \old(i) == i)
}

void bar() {
  int i = 1;
  _(assert \old(i) == i)
}
`
testcase(4,26) : warning VC9106: 'old', 'in_state', or 'when_claimed' in '\old(i)' has no effect
testcase(9,26) : warning VC9106: 'old', 'in_state', or 'when_claimed' in '\old(i)' has no effect
Verification of foo succeeded.
Verification of bar succeeded.
`
`/newsyntax
#include <vcc.h>

typedef struct itype_instr_t {
    int simm16:16;
    unsigned rd:5;
    unsigned rs1:5;
    unsigned opc:6;
} itype_instr_t;

typedef union _U{
itype_instr_t a;
_(backing_member) unsigned int b;
} U;


_(ghost _(pure) U sf(unsigned int i)
      _(ensures \result.b == i);)

void test1()
{
unsigned int i;
i = 5;
_(assert sf(i).b == 5)
}

void test3(unsigned int *i)
_(requires \mutable(i) && *i == 5)
{
_(assert sf(*i).b == 5)
}
`
Verification of test1 succeeded.
Verification of test3 succeeded.
`
`/newsyntax
#include <vcc.h>

void foo()
{
  int x, *p;
  _(ghost \state s1, s2;)
  _(ghost \state s3, ^s3p;)
  p = &x;
  _(ghost  s3p = &s3;)

  *p = 1;
  _(ghost s3 = \now();)
  _(ghost s1 = \now();)
  *p = 2;
  _(ghost s3 = \now();)
  _(ghost s2 = \now();)

  _(assert \at(s1, \at(s2, *p)) == 2)
  _(assert \at(s2, \at(s1, *p)) == 1)
  _(assert \at(s1, \at(\now(), *p)) == 2)


  _(assert \at(s1, \at(s3, *p)) == 2)
  _(assert \at(\at(s1, s3), *p) == 1)
  _(assert \at(s1, \at(\at(\now(),s3), *p)) == 2)
}
`
testcase(18,26) : warning VC9106: 'old', 'in_state', or 'when_claimed' in '\at(s1, \at(s2, *p))' has no effect
testcase(19,26) : warning VC9106: 'old', 'in_state', or 'when_claimed' in '\at(s2, \at(s1, *p))' has no effect
testcase(20,26) : warning VC9106: 'old', 'in_state', or 'when_claimed' in '\at(s1, \at(\now(), *p))' has no effect
testcase(23,26) : warning VC9106: 'old', 'in_state', or 'when_claimed' in '\at(s1, \at(s3, *p))' has no effect
testcase(25,26) : warning VC9106: 'old', 'in_state', or 'when_claimed' in '\at(s1, \at(\at(\now(),s3), *p))' has no effect
Verification of foo succeeded.
`
`/newsyntax
#include "vcc.h"

#define unchanged_s(s,e) (\at((s),e)==(e))

_(ghost struct X {
  _(ghost \state s;)
  int a;
};)

void foo(int *y)
{
    _(ghost struct X x;)
    _(assert unchanged_s(x.s,*y))
}

`
Verification of foo failed.
testcase(13,29) : error VC9500: Assertion '\at((x.s),*y)==(*y)' did not verify.
`
`/newsyntax
#include <vcc.h>

void foo(int x) {
  int x0 = x;
  x = 0;
  _(assert x0 == \old(x))
}
`
Verification of foo succeeded.
`