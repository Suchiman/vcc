
#include <vcc.h>

struct S { int a; };

struct T { 
  struct S s; 
  unsigned int b;
};

void foo(struct S *s) 
  requires(typed(s) && thread_local(s))
  requires(extent_zero(s))
{
  assert(s->a == 0);
}

void bar(struct T *t) 
  requires(typed(t) && thread_local(t))
  requires(extent_zero(t))
{
  assert(t->s.a == 0);
  assert(t->b == 0);
}
`
Verification of foo succeeded.
Verification of bar succeeded.
`
#include <vcc.h>

struct S { 
  int a; 
  unsigned int b;
  short c;
  unsigned short d;
  char e;
  unsigned char f;
  void *p;
};

void foo(struct S *s) 
  requires(typed(s) && thread_local(s))
  requires(extent_zero(s))
{
  assert(s->a == 0);
  assert(s->b == 0);
  assert(s->c == 0);
  assert(s->d == 0);
  assert(s->e == 0);
  assert(s->f == 0);
  assert(s->p == (void *)0);
}

void bar() {
  struct S s;
  s.a = 0;
  s.b = 0;
  s.c = 0;
  s.d = 0;
  s.e = 0;
  s.f = 0;
  s.p = (void *)0;
  assert(extent_zero(&s));
}

`
Verification of foo succeeded.
Verification of bar succeeded.
`
#include "vcc.h"

struct S { 
  unsigned __int8 u1;
  unsigned __int16 u2;
  unsigned __int32 u4;
  unsigned __int64 u8;
  __int8 i1;
  __int16 i2;
  __int32 i4;
  __int64 i8;
  void *p;
  spec(void *pp;)
  spec(void ^gp;)
  int *ip;
  spec(int *ipp;)
  spec(int ^igp;)
};

void foo(struct S *s) 
  requires(wrapped(s))
  requires(extent_zero(s))
{
  assert(s->u1 == 0);
  assert(s->u2 == 0);
  assert(s->u4 == 0);
  assert(s->u8 == 0);
  assert(s->i1 == 0);
  assert(s->i2 == 0);
  assert(s->i4 == 0);
  assert(s->i8 == 0);
  assert(s->p == (void *)0);
  assert(s->pp == (void *)0); // not clear if needed
  assert(s->gp == (void ^)0); // not clear if needed
  assert(s->ip == (int *)0);
  assert(s->ipp == (int *)0); // not clear if needed
  assert(s->igp == (int ^)0); // not clear if needed
}

void bar_u1() {
  unsigned __int8 x;
  assume(extent_zero(&x));
  assert(x == 0);
}

void bar_u2() {
  unsigned __int16 x;
  assume(extent_zero(&x));
  assert(x == 0);
}

void bar_u4() {
  unsigned __int32 x;
  assume(extent_zero(&x));
  assert(x == 0);
}

void bar_u8() {
  unsigned __int64 x;
  assume(extent_zero(&x));
  assert(x == 0);
}

void bar_i1() {
  __int8 x;
  assume(extent_zero(&x));
  assert(x == 0);
}

void bar_i2() {
  __int16 x;
  assume(extent_zero(&x));
  assert(x == 0);
}

void bar_i4() {
  __int32 x;
  assume(extent_zero(&x));
  assert(x == 0);
}

void bar_i8() {
  __int64 x;
  assume(extent_zero(&x));
  assert(x == 0);
}

void bar_p() {
  void *x;
  assume(extent_zero(&x));
  assert(x == (void *)0);
}

void bar_pp() {
  spec(void *x;)
  assume(extent_zero(&x));
  assert(x == (void *)0);
}

void bar_gpp() {
  spec(void ^x;)
  assume(extent_zero(&x));
  assert(x == (void *)0);
}

void bar_ip() {
  int *x;
  assume(extent_zero(&x));
  assert(x == (void *)0);
}

void bar_ipp() {
  spec(int *x;)
  assume(extent_zero(&x));
  assert(x == (void *)0);
}

void bar_igp() {
  spec(int ^x;)
  assume(extent_zero(&x));
  assert(x == (void *)0);
}

typedef void *pvoid;
#ifdef VERIFY
typedef void ^gpvoid;
#endif
typedef int *pint;
#ifdef VERIFY
typedef int ^gpint;
#endif

void baz_u1()
{
  unsigned __int8 a[42];
  assume(extent_zero(as_array(a,42)));
  assert(a[17]==0);
}

void baz_u2()
{
  unsigned __int16 a[42];
  assume(extent_zero(as_array(a,42)));
  assert(a[17]==0);
}

void baz_u4()
{
  unsigned __int32 a[42];
  assume(extent_zero(as_array(a,42)));
  assert(a[17]==0);
}

void baz_u8()
{
  unsigned __int64 a[42];
  assume(extent_zero(as_array(a,42)));
  assert(a[17]==0);
}

void baz_i1()
{
  __int8 a[42];
  assume(extent_zero(as_array(a,42)));
  assert(a[17]==0);
}

void baz_i2()
{
  __int16 a[42];
  assume(extent_zero(as_array(a,42)));
  assert(a[17]==0);
}

void baz_i4()
{
  __int32 a[42];
  assume(extent_zero(as_array(a,42)));
  assert(a[17]==0);
}

void baz_i8()
{
  __int64 a[42];
  assume(extent_zero(as_array(a,42)));
  assert(a[17]==0);
}

void baz_p()
{
  pvoid a[42];
  assume(extent_zero(as_array(a,42)));
  assert(a[17]==(void *)0);
}

void baz_pp()
{
  spec(pvoid a[42];)
  assume(extent_zero(as_array(a,42)));
  assert(a[17]==(void *)0);
}

void baz_gpp()
{
  spec(void ^a[42];)
  assume(extent_zero(as_array(a,42)));
  assert(a[17]==(void *)0);
}

void baz_ip()
{
  pint a[42];
  assume(extent_zero(as_array(a,42)));
  assert(a[17]==(void *)0);
}

void baz_ipp()
{
  spec(pint a[42];)
  assume(extent_zero(as_array(a,42)));
  assert(a[17]==(void *)0);
}

void baz_igp()
{
  spec(int ^a[42];)
  assume(extent_zero(as_array(a,42)));
  assert(a[17]==(void *)0);
}


struct BF32 {
  unsigned a : 17;
  int b : 15;
};

void bf_foo(struct BF32 *bf32)
  requires(wrapped(bf32))
  requires(extent_zero(bf32))
{
  assert(bf32->a==0);
  assert(bf32->b==0);
}

union T { 
  struct BF32 bf32;
  backing_member unsigned c;
};


void bm_foo(union T *t)
  requires(wrapped(t))
  requires(extent_zero(t))
{
  assert(t->bf32.a==0);
  assert(t->bf32.b==0);
  assert(t->c==0);
}

union U { 
  unsigned a;
  int b;
};

void union_foo1(union U *u)
  requires(wrapped(u))
  requires(union_active(u,a))
  requires(extent_zero(u))
{
  assert(u->a==0);
}

void union_foo2ShouldFail(union U *u)
  requires(wrapped(u))
  requires(union_active(u,a))
  requires(extent_zero(u))
{
  assert(u->b==0);
}

void union_foo3(union U *u)
  requires(wrapped(u))
  requires(union_active(u,b))
  requires(extent_zero(u))
{
  assert(u->b==0);
}

void union_foo4ShouldFail(union U *u)
  requires(wrapped(u))
  requires(union_active(u,b))
  requires(extent_zero(u))
{
  assert(u->a==0);
}
`
Verification of foo succeeded.
Verification of bar_u1 succeeded.
Verification of bar_u2 succeeded.
Verification of bar_u4 succeeded.
Verification of bar_u8 succeeded.
Verification of bar_i1 succeeded.
Verification of bar_i2 succeeded.
Verification of bar_i4 succeeded.
Verification of bar_i8 succeeded.
Verification of bar_p succeeded.
Verification of bar_pp succeeded.
Verification of bar_gpp succeeded.
Verification of bar_ip succeeded.
Verification of bar_ipp succeeded.
Verification of bar_igp succeeded.
Verification of baz_u1 succeeded.
Verification of baz_u2 succeeded.
Verification of baz_u4 succeeded.
Verification of baz_u8 succeeded.
Verification of baz_i1 succeeded.
Verification of baz_i2 succeeded.
Verification of baz_i4 succeeded.
Verification of baz_i8 succeeded.
Verification of baz_p succeeded.
Verification of baz_pp succeeded.
Verification of baz_gpp succeeded.
Verification of baz_ip succeeded.
Verification of baz_ipp succeeded.
Verification of baz_igp succeeded.
Verification of bf_foo succeeded.
Verification of bm_foo succeeded.
Verification of union_foo1 succeeded.
Verification of union_foo2ShouldFail failed.
testcase(278,12) : error VC9500: Assertion 'u->b==0' did not verify.
Verification of union_foo3 succeeded.
Verification of union_foo4ShouldFail failed.
testcase(294,12) : error VC9500: Assertion 'u->a==0' did not verify.
`
#include <vcc.h>

struct S {
  int a;
  int b;
};

void foo() {
  struct S s;
  s.a = 0;
  s.b = 0;
  assert(extent_zero(&s));
}

void bar() {
  int i = 0;
  assert(extent_zero(&i));
}

void baz() {
  int a[4] = { 0,0,0,0 };
  assert(extent_zero(as_array(a, 4)));
}

void qux() {
  struct S a[4];
  a[0].a = 0;
  a[0].b = 0;
  a[1].a = 0;
  a[1].b = 0;
  a[2].a = 0;
  a[2].b = 0;
  a[3].a = 0;
  a[3].b = 0;
  assert(extent_zero(as_array(a,4)));
}
`
Verification of foo succeeded.
Verification of bar succeeded.
Verification of baz succeeded.
Verification of qux succeeded.
`