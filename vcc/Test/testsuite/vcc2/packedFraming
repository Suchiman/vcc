#include <vcc.h>

struct B {
  int x;
};

void donothing();

void foo(struct B *b)
  requires(wrapped(b))
{
  donothing();
  assert(old(b->x) == b->x);
}
`
Verification of foo succeeded.
`
#include <vcc.h>

struct A {
  int x;
};

void update(struct A *a)
  maintains(wrapped(a))
  writes(a);

void foo(struct A *a, struct A *b)
  requires(wrapped(a) && wrapped(b) && a != b)
  writes(a,b)
{
  assert(in_domain(b, b));
  update(a);
  assert(b->x == old(b->x));
}


void fooFail1(struct A *a, struct A *b)
  requires(wrapped(a) && wrapped(b))
  writes(a,b)
{
  assert(in_domain(b, b));
  update(a);
  assert(b->x == old(b->x));
}


vcc_attr("no_infer", "all")
void fooMayFail1(struct A *a, struct A *b)
  requires(wrapped(a) && wrapped(b) && a != b)
  writes(a,b)
{
  update(a);
  assert(b->x == old(b->x));
}

`
Verification of foo succeeded.
Verification of fooFail1 failed.
testcase(27,12) : error VC9500: Assertion 'b->x == __old(b->x)' did not verify.
Verification of fooMayFail1 failed.
testcase(37,12) : error VC9500: Assertion 'b->x == __old(b->x)' did not verify.
`
#include <vcc.h>

struct B {
  int y;
};

struct A {
  int x;
  struct B *b;

  invariant(keeps(this->b))
};

void update(struct A *a)
  writes(a);

void bar(struct A *a, struct A *b)
  requires(wrapped(a) && wrapped(b) && a != b)
  writes(a,b)
{
  assert(in_domain(a,a));
  assert(in_domain(a->b,a));
  update(b);
  assert(a->b->y == old(a->b->y));
}
`
Verification of A#adm succeeded.
Verification of bar succeeded.
`
#include "vcc.h"

typedef unsigned __int64 uint64;
struct CONC {
    int a;
    uint64   GPR[16];
    uint64   RIP;
 uint64  DebugR[8];
};

void bar(struct CONC *c)
  writes(c);

void foo(struct CONC *c, struct CONC *c2)
  requires(c != c2 && wrapped(c))
  writes(c, c2)

{
  unwrap(c);
  c->GPR[3] = 12;
  wrap(c);
  assert(c->GPR[3] == 12);
  assert(in_domain(c,c));
  bar(c2);
  assert(c->GPR[3] == 12);
}
`
Verification of foo succeeded.
`
#include "vcc.h"

struct S { int a; };

void foo(int *a) writes(a);

void bar(struct S *s, int *a spec(obj_t c_root))
    requires(wrapped(c_root))
    requires(in_domain(s,c_root))
//    maintains(thread_local(s))
    writes(a)
{
    int tmp = s->a, t2;
    foo(a);
//    assert(in_domain(s,c_root));
    t2 = s->a;
    assert(tmp == t2);
}

void bar2(struct S *s, int *a spec(obj_t c_root))
    requires(wrapped(c_root))
    requires(in_domain(s,c_root))
    maintains(thread_local(s))
    writes(a)
{
    int tmp = s->a, t2;
    foo(a);
    assert(in_domain(s,c_root));
    t2 = s->a;
    assert(tmp == t2);
}
`
Verification of bar succeeded.
Verification of bar2 succeeded.
`
#include "vcc.h"

void works(int *a, int *b)
    maintains(wrapped(as_array(a,42)))
    maintains(wrapped(as_array(b,42)))
    writes(as_array(a,42))
    requires(a!=b) // apparently sufficient for framing here
    ensures(forall(unsigned i; i < 42; unchanged(b[i])))
    ensures(forall(unsigned i; i < 42; i ? unchanged(a[i]) : a[i]==5))
{
    unwrap(as_array(a,42));
    a[0] = 5;
    wrap(as_array(a,42));
}

void set_5_at_0(unsigned *a)
    maintains(is_mutable_array(a,42))
    writes(a+0)
    ensures(*a==5)
{
    a[0] = 5;
}

struct vcc(dynamic_owns) X {
  int y;
};

void problematic(unsigned *a, unsigned *b)
    maintains(wrapped(as_array(a,42)))
    maintains(wrapped(as_array(b,42)))
    writes(as_array(a,42))
    requires(a!=b)
    ensures(forall(unsigned i; i < 42; unchanged(b[i])))
    ensures(forall(unsigned i; i < 42; i ? unchanged(a[i]) : a[i]==5))
{
    assert(in_domain(as_array(b,42),as_array(b,42)));
    unwrap(as_array(a,42));
    set_5_at_0(a);
    wrap(as_array(a,42));
}
`
Verification of works succeeded.
Verification of set_5_at_0 succeeded.
Verification of problematic succeeded.
`
#include <vcc.h>

struct _A{
    int dummy;
};

typedef struct vcc(volatile_owns) _B{
    struct _A *a;
    invariant(set_in(a, owns(this)))

 //here should be other components that are conditionally owned 
//...
} B;


struct X { int x; };

void wr(struct X *x)
  out_param(x);

void foo(B *b)
requires(wrapped(b))
{
struct X unrelated;
    assert(in_domain(b, b));
    assert(in_vdomain(b->a, b));
    assume(b->a->dummy == 12);
    wr(&unrelated);
    assert(b->a->dummy == 12);
}

struct C {
  struct B *b;
  invariant(keeps(b))
};
struct vcc(volatile_owns) VC {
  struct B *b;
  invariant(keeps(b))
};

void foo2(struct C *b)
requires(wrapped(b))
{
struct X unrelated;
    assert(in_domain(b, b));
    assert(in_domain(b->b, b));
    assert(in_vdomain(b->b->a, b));
    assume(b->b->a->dummy == 12);
    wr(&unrelated);
    assert(b->b->a->dummy == 12);
}

void foo3(struct VC *b)
requires(wrapped(b))
{
struct X unrelated;
    assert(in_domain(b, b));
    assert(in_vdomain(b->b, b));
    assert(in_vdomain(b->b->a, b));
    assume(b->b->a->dummy == 12);
    wr(&unrelated);
    assert(b->b->a->dummy == 12);
}


typedef struct vcc(volatile_owns) _B2{
    struct _A *a;
    int f;
    invariant(f ==> set_in(a, owns(this)))
} B2;


void fooFail1(B2 *b)
requires(wrapped(b))
{
    assert(in_domain(b, b));
    assert(in_vdomain(b->a, b));
}

void fooComplex(B2 *b)
requires(wrapped(b))
requires(b->f)
{
    assert(in_domain(b, b));
    assert(in_vdomain(b->a, b));
}

typedef struct vcc(volatile_owns) _B3 {
    struct _A *a;
    volatile int f;
    invariant(f ==> set_in(a, owns(this)))
} B3;


void fooFail2(B3 *b)
requires(wrapped(b))
requires(b->f)
{
    assert(in_domain(b, b));
    assert(in_vdomain(b->a, b));
}
`
Verification of _B#adm succeeded.
Verification of C#adm succeeded.
Verification of VC#adm succeeded.
Verification of _B2#adm succeeded.
Verification of _B3#adm succeeded.
Verification of foo succeeded.
Verification of foo2 succeeded.
Verification of foo3 succeeded.
Verification of fooFail1 failed.
testcase(77,14) : error VC9500: Assertion '_vcc_in_vdomain(b->a,b)' did not verify.
Verification of fooComplex succeeded.
Verification of fooFail2 failed.
testcase(100,14) : error VC9500: Assertion '_vcc_in_vdomain(b->a,b)' did not verify.
`
#include <vcc.h>

struct A { int x; };
struct B {
  struct A *a;
  invariant(keeps(a))
};
struct C {
  struct B *b;
  invariant(keeps(b))
};

void SetX(struct B *b)
  maintains(wrapped_dom(b))
  writes(b)
  ensures(domain_updated_at(b, SET(&b->a->x)))
{
  skinny_expose(b, b->a)
    writes(&b->a->x)
  {
    b->a->x = 10;
  }
}

void foo(struct C *c)
  maintains(wrapped(c))
  writes(c)
  ensures(domain_updated_at(c, SET(&c->b->a->x)))
{
	skinny_expose(c)
		writes(c->b, &c->b->a->x)
	{
		SetX(c->b);
	}
}


`
Verification of B#adm succeeded.
Verification of C#adm succeeded.
Verification of SetX succeeded.
Verification of foo succeeded.
`
#include <vcc2.h>

struct B { int x; invariant(x > 0) };

struct vcc(volatile_owns) A {
 struct B b;
 invariant(keeps(&b))
};

void foo(struct A *a)
  requires(wrapped(a))
{
  assert(in_vdomain(&a->b, a));
  assert(a->b.x > 0);
}
`
Verification of B#adm succeeded.
Verification of A#adm succeeded.
Verification of foo succeeded.
`
