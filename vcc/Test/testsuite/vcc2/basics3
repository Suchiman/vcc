#include "vcc.h"

void foo(struct S *x, struct T y) {
	struct V a;
}
`
testcase(3,23) : error VC0000: 'y' : illegal use of undefined type 'T'.
testcase(4,9) : error VC0000: 'a' : illegal use of type 'void'.
`
#include "vcc.h"

struct Foo {
   unsigned N;
   invariant(0 < N);
   invariant(forall(true)); 
};
`
testcase(6,16) : error VC0000: Quantifier without variables.
`
#include <vcc.h>

void foo() {
  const int y;
  y = 1;
}
`
testcase(5,3) : error VC0000: The left-hand side of an assignment must be a variable, property or indexer.
`
#include <vcc.h>

void foo() {
  int x;
  const int y = x;
  x = y;
  assert(x == y);
}
`
Verification of foo succeeded.
`
#include "vcc.h"
spec(struct U { invariant(this==&u) } u;)
`
Verification of U#adm succeeded.
`
#include "vcc.h"

void foo(int *a, unsigned n)
	requires(n && typed(as_array(a,n)))
{
	assert(set_in(a+0,span(as_array(a,n))));
}
`
Verification of foo succeeded.
`