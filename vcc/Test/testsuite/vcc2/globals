#include <vcc.h>

int b;

void admis_B(short *b)
{
assert(false);
}


void bar()
  requires(program_entry_point())
{
  int tmp = b;
}
`
Verification of admis_B failed.
testcase(7,10) : error VC9500: Assertion '((bool)0)' did not verify.
Verification of bar succeeded.
`
#include <vcc.h>

int b;

void bar()
{
  int tmp = b;
}
`
Verification of bar failed.
testcase(7,13) : error VC8512: Assertion 'b is thread local' did not verify.
`
#include <vcc.h>

int x;

struct A {
  int y;

  spec(claim_t c;)

  invariant(keeps(c) && claims(c, closed(emb(&x))))
  invariant(y < by_claim(c, x))
};

spec(
struct vcc(claimable) _GlobalOwner {
  int dummy;
  invariant(keeps(emb(&x)))
} GlobalOwner;
)

struct A a;

void init()
  writes(set_universe())
  requires(program_entry_point())
{
  spec(claim_t c;)

  x = 42;
  wrap(emb(&x));

  set_owns(&GlobalOwner, set_singleton(emb(&x)));
  wrap(&GlobalOwner);

  a.y = 12;
  spec(  
    c = claim(&GlobalOwner, true); 
    a.c = c;
    set_owns(&a, set_singleton(c));
    wrap(&a);
  )
}
`
Verification of A#adm succeeded.
Verification of _GlobalOwner#adm succeeded.
Verification of init succeeded.
`
#include "vcc.h"
typedef struct _X { int a, b; } X;
const X my_x;
void foo(X x);

void bar1() 
  requires(program_entry_point())
  { foo(my_x); }
`
Verification of bar1 succeeded.
`


#include <vcc.h>

typedef struct _T {
  int a; int b;
} T;

T S;

void no_chg(int* x)
        writes(x)
        maintains(wrapped(&S))
        maintains(thread_local(x))
        ensures(deep_eq(S,old(S)))
        ensures(*x == S.a)
        maintains(mutable(x) && is_object_root(x));

int foo()
writes(extent(&S))
{
        int c;

        S.a=7;
        S.b=42;

        set_owns(&S, set_empty());
        wrap(&S);

        no_chg(&c);

        assert(c == S.a); // VERIFIES
        assert(S.a == 7); // FAILS

        return 0;
}

`
Verification of foo succeeded.
`

#include <vcc.h>

volatile int i;

void fooShouldFail(claimp(p))
  always(p, closed(gemb(&i)))
{
  atomic(p, gemb(&i)) {
    i = 5;
  }
}
`
Verification of fooShouldFail failed.
testcase(9,24) : error VC8525: Assertion 'invariant of _vcc_gemb(&i) holds after atomic' did not verify.
`
#include <vcc.h>

volatile int global;

typedef struct vcc(claimable) GlobalsOwner{
  invariant(this == &Globals)
  invariant(keeps(gemb(&global)))

  int dummy;
  spec(volatile int shadow;)
  invariant(shadow == global)
} GlobalsOwner;

GlobalsOwner Globals;

void
f(claimp(c))
  always(c, closed(&Globals))
  {
  atomic(c, gemb(&global), &Globals){
        global = 5;
        spec(Globals.shadow = 5;)
     }    
  }

void foo()
  maintains(wrapped(gemb(&global)))
  writes(gemb(&global))
{
  atomic(gemb(&global)) {
    global = 5;
    bump_volatile_version(gemb(&global));
  }
}

void fooShouldFail()
  maintains(wrapped(gemb(&global)))
  writes(gemb(&global))
{
  atomic(gemb(&global)) {
    global = 5;
  }
}
`
Verification of GlobalsOwner#adm succeeded.
Verification of f succeeded.
Verification of foo succeeded.
Verification of fooShouldFail failed.
testcase(40,21) : error VC8525: Assertion 'invariant of _vcc_gemb(&global) holds after atomic' did not verify.
`
#include <vcc.h> 

struct A {
    int foo;
};

struct vcc(claimable) LockContainer {
    struct A embedded;
    invariant(keeps(&embedded))
} Container;

void Initialize() 
    requires(mutable(&Container))
    ensures(wrapped(&Container))
    writes(extent(&Container))
    ;

void Main() 
    requires(program_entry_point())    
    //writes(set_universe(), extent(&Container))
    writes(set_universe())
{
    Initialize();
}
`
Verification of LockContainer#adm succeeded.
Verification of Main succeeded.
`
#include "vcc2test.h"

int a = 10;
void *n = NULL;

void foo()
  requires(program_entry_point())
{
  int x = a;
  assert(x == 10);
}

void fooShouldFail()
{
  assert(a == 10);
}

void bar() 
  requires(program_entry_point())
{
  void* x = n;
  assert(x == NULL);
}
`
Verification of foo succeeded.
Verification of fooShouldFail failed.
testcase(15,12) : error VC9500: Assertion 'a == 10' did not verify.
Verification of bar succeeded.
`
#include "vcc.h"

int x, y;

void foo() {
  assert(gemb(&x)!=gemb(&y));
}
`
Verification of foo succeeded.
`
