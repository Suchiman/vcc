// TODO
#include <vcc.h>

double add(double a, double b)
  ensures(result == a + b || result == a + b + 0.0)
 {
  if (a == b) return a+b;
  else return a+b+0.0;
}

double mul(double a, double b)
  ensures(result == a * b || result == a * b * 0.0)
 {
  if (a == b) return a*b;
  else return a*b*0.0;
}
double sub(double a, double b)
  ensures(result == a - b || result == a - b - 0.0)
 {
  if (a == b) return a-b;
  else return a-b-0.0;
}
double div(double a, double b)
  ensures(result == a / b || result == a / b / 0.0)
 {
  if (a == b) return a/b;
  else return a/b/0.0;
}

float addf(float a, float b)
  ensures(result == a + b || result == a + b + 0.0f)
 {
  if (a == b) return a+b;
  else return a+b+0.0f;
}

double lit() 
  ensures(result == 42.0)
{
  return 42.0;
}
`
Verification of add succeeded.
Verification of mul succeeded.
Verification of sub succeeded.
Verification of div succeeded.
Verification of addf succeeded.
Verification of lit succeeded.
`
#include <vcc.h>

struct S {
  double a;
  double b;
  invariant(a + b == 0.0)
};

void foo(struct S *s) 
  requires(wrapped(s))
{ 
  assert(in_domain(s,s));
  assert(s->a + s->b == 0.0);
}
`
Verification of S#adm succeeded.
Verification of foo succeeded.
`
