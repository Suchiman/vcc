#include <vcc.h>

typedef unsigned __int64 UINT64;

typedef struct _S { UINT64 v; } S;

void foo(S s)
{
  s.v = 0UI64;
}

`
Verification of foo succeeded.
`
#include <vcc.h>

typedef struct {int i; } S;

void foo(S s)
{
  int* p = &s.i;
  *p = 1;
  assert(s.i == 1);
}
`
Verification of foo succeeded.
`

#include <vcc.h>

typedef struct proc_t {
    unsigned int gpr[32];    
    unsigned int spr[17];    
    unsigned int dpc;        
    unsigned int pcp;        
} proc_t;

spec(
ispure   bool post(proc_t proc, proc_t oldproc) 
    ensures(result == (proc.dpc == oldproc.pcp && proc.pcp == unchecked(oldproc.pcp + 4)));
)    

void f(proc_t *proc)
  requires(_vcc_mutable(proc))
  ensures(post(*proc, old(*proc)))
  writes(_vcc_extent(proc))
{
  proc->dpc = proc->pcp;
  proc->pcp = unchecked(proc->pcp +4);
}
`
Verification of f succeeded.
`
