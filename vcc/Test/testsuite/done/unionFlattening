#include <vcc2.h>

union U {
  backing_member unsigned __int32 a[4];
  unsigned __int64 b[2];
};

void foo() { 
  union U u;
  u.b[0] = 1;
}

`
testcase(10,3) : error VC9654: Expression is invalid due to union flattening. Flattening of arrays requires the backing member to be of array type with same element size and alignment.
`

#include <vcc2.h>

union U {
  unsigned __int32 a[4];
  backing_member unsigned __int64 b[2];
};

void foo() { 
  union U u;
  u.b[0] = 1;
}

`
Verification of foo succeeded.
`
#include <vcc2.h>

union U {
  backing_member unsigned __int64 AsUINT64;
  struct {
    unsigned __int64 a:32;    
    unsigned __int64 b:32;
  };
};

union V {
  backing_member union U u;
  struct {
    unsigned __int64 a:16;    
    unsigned __int64 b:16;
    unsigned __int64 c:16;    
    unsigned __int64 d:16;
  };
};

void foo(union V *v) 
  requires(mutable(v))
  writes(extent(v))
{ 
  v->u.AsUINT64 = 1;
  assert(v->u.AsUINT64 == 1);
  assert(v->u.a == 1);
  assert(v->u.b == 0);
  v->a = 2;
  assert(v->a == 2);
  assert(v->b == 0);
  assert(v->c == 0);
  assert(v->d == 0);
}
`
Verification of foo succeeded.
`
#include "vcc2.h"

typedef unsigned __int16 UINT16;
typedef unsigned __int32 UINT32;
typedef unsigned __int64 UINT64;

typedef union _UNION_TYPE
{
    backing_member UINT64 AsArrayUINT64[2];

    struct
    {
		UINT64 ValueUINT64;
        union
        {
            // Long Mode
            backing_member UINT64 AsUINT64;
            // 32 Bit Mode
            struct
            {
                UINT32 ValueUINT32;
                UINT16 ValueUINT16;
            };
        };
    };
} UNION_TYPE, *PUNION_TYPE;

PUNION_TYPE testit(PUNION_TYPE arg) 
	maintains(wrapped(arg))
	ensures(result == arg)
{
	return arg;
}
`
Verification of testit succeeded.
`
