#include <vcc.h>

void AllIntegralOperationsTestOk() {
  signed char i1;
  unsigned char u1;
  signed short i2;
  unsigned short u2;
  signed int i4;
  unsigned int u4;
  signed __int64 i8;
  unsigned __int64 u8;
  bool b;
  u8 = unchecked((unsigned __int64)i8);
  u4 = unchecked((unsigned int)i4);
  u2 = unchecked((unsigned short)i2);
  u1 = unchecked((unsigned char)i1);
  b = 1;
}

void IntOperationsTestOk(int a, int b)
  requires(0 < a && a < 100)
  requires(0 < b  && b < 100)
{
  int z; bool y;

  z = -a;
  z = +z;
  z = a + b;
  z = a - b;

  z = unchecked(a * b);
  z = a / b;
  z = a % b;
  z = a % 4;

  y = !y;
  y = a < b;
  y = a > b;
  y = a <= b;
  y = a >= b;

  y = a == b;
  y = a != b;

  z = ~a;
  z = a & b;
  z = a | b;
  z = a ^ b;
  z = 1;
  z = 0xFFFF;
  z = 077;
}

void IntShiftOperationsTestOk(int a, int b)
  requires(0 < a && a < 100)
  requires(0 <= b  && b < 32)
{
  int z; bool y;

  z = a >> b;
  z = a << b;

}

void ShortOperationsTestOk(short a, short b)
  requires(0 < a && a < 100)
  requires(0 < b  && b < 100)
{
  short z = 1;
  bool y;

  z = (short)-z;
  z = (short)+z;
  z = (short)(a + b);
  z = (short)(a - b);

  z = unchecked((short)(a * b));
  z = unchecked((short)(a / b));
  z = (short)(a % b);

  y = !y;
  y = a < b;
  y = a > b;
  y = a <= b;
  y = a >= b;

  y = a == b;
  y = a != b;

  z = unchecked((short)(~a));
  z = unchecked((short)(a & b));
  z = unchecked((short)(a | b));
  z = unchecked((short)(a ^ b));
}

void ShortShiftOperationsTestOk(short a, short b)
  requires(0 < a && a < 100)
  requires(0 <= b  && b < 16)
{
  short z = 1;
  bool y;

  z = unchecked((short)(a >> b));
  z = unchecked((short)(a << b));
}

void CharOperationsTestOk(char a, char b)
  requires(0 < a && a < 50)
  requires(0 < b  && b < 50)
{
  char z; bool y;

  z = (char)(a + b);
  z = (char)(a - b);

  z = unchecked((char)(a * b));
  z = unchecked((char)(a / b));
  z = (char)(a % b);

  y = !y;
  y = a < b;
  y = a > b;
  y = a <= b;
  y = a >= b;

  y = a == b;
  y = a != b;

  z = unchecked((char)~a);
  z = unchecked((char)(a & b));
  z = unchecked((char)(a | b));
  z = unchecked((char)(a ^ b));
  z = 'a';
  z = unchecked((char)0xFF);
}

void CharShiftOperationsTestOk(char a, char b)
  requires(0 < a && a < 50)
  requires(0 <= b  && b < 8)
{
  char z; bool y;

  z = unchecked((char)(a >> b));
  z = unchecked((char)(a << b));
}

void LongOperationsTestOk(__int64 a, __int64 b)
  requires(0 < a && a < 100)
  requires(0 < b  && b < 100)
{
  __int64 z; bool y;

  z = a + b;
  z = a - b;

  z = unchecked(a * b);
  z = a / b;
  z = a % b;

  y = !y;
  y = a < b;
  y = a > b;
  y = a <= b;
  y = a >= b;

  y = a == b;
  y = a != b;

  z = ~a;
  z = a & b;
  z = a | b;
  z = a ^ b;
  z = 0x7FFFFFFF;
}

void LongShiftOperationsTestOk(__int64 a, __int64 b)
  requires(0 < a && a < 100)
  requires(0 <= b  && b < 64)
{
  __int64 z; bool y;

  z = a >> (int)b;
  z = a << (int)b;
}

void BoolOperationsTestOk(bool a, bool b) {
  bool y;
  y = a && b;
  y = a || b;
  y = !a || b;
  y = !y;
}

int DivisionByZeroTestFails1() {
  int zero, x, result;
  zero = 0;
  x = 1/zero;
  return x;
}

int DivisionByZeroTestFails2() {
  int zero, x, result;
  zero = 0;
  x = 1/(zero+zero);
  return x;
}
`
Verification of AllIntegralOperationsTestOk succeeded.
Verification of IntOperationsTestOk succeeded.
Verification of IntShiftOperationsTestOk succeeded.
Verification of ShortOperationsTestOk succeeded.
Verification of ShortShiftOperationsTestOk succeeded.
Verification of CharOperationsTestOk succeeded.
Verification of CharShiftOperationsTestOk succeeded.
Verification of LongOperationsTestOk succeeded.
Verification of LongShiftOperationsTestOk succeeded.
Verification of BoolOperationsTestOk succeeded.
Verification of DivisionByZeroTestFails1 failed.
testcase(197,9) : error VC8519: Assertion 'zero != 0 (in division by zero)' did not verify.
Verification of DivisionByZeroTestFails2 failed.
testcase(204,10) : error VC8519: Assertion 'zero+zero != 0 (in division by zero)' did not verify.
`
#include <vcc.h>

int add(int i, int j)
{
  return i + j;
}
`
Verification of add failed.
testcase(5,10) : error VC8004: i + j might overflow.
`
#include <vcc.h>

int sub(int i, int j)
{
  return i - j;
}
`
Verification of sub failed.
testcase(5,10) : error VC8004: i - j might overflow.
`
#include <vcc.h>

int div(int i, int j)
  requires(j != 0)
{
  return i / j;
}
`
Verification of div failed.
testcase(6,10) : error VC8003: i / j might overflow (in div/mod case).
`
#include <vcc.h>

int mul(int i)
{
  return i * 1000;
}
`
Verification of mul failed.
testcase(5,10) : error VC8004: i * 1000 might overflow.
`
#include <vcc.h>

int mul(int i)
  requires(0 < i && i < 100)
{
  return i * 1000;
}
`
Verification of mul succeeded.
`
#include <vcc.h>

void foo(unsigned a, unsigned b)
{
  unsigned r = unchecked(a + b);
  assert(r >= a);
}

void bar(int x)
{
  x = -x;
}

void foobar(int x)
{
  assert(unchecked(-x) == unchecked(0 - x));
}

void foobar2(int x)
{
  assume(0 <= x && x <= 100);
  assert(unchecked(-x) == unchecked(0 - x));
}

void baz(unsigned x, unsigned y)
{
  if (y != 0)
    x = x / y;
}
`
Verification of foo failed.
testcase(6,12) : error VC9500: Assertion 'r >= a' did not verify.
Verification of bar failed.
testcase(11,7) : error VC8004: -x might overflow.
Verification of foobar succeeded.
Verification of foobar2 succeeded.
Verification of baz succeeded.
`
#include <vcc.h>

ispure
int sin(int x);

axiom(forall(int x; (-1 <= sin(x)) && (sin(x) <= 1)));

#define RHS sin(a)*b
#define LHS c

void test006a(int a, int b, int c2)
{
    int LHS;
    int tmpRHS = unchecked(RHS);
    LHS = tmpRHS;
    assert(LHS == tmpRHS);
}

void test006b(int a, int b, int c2)
{
    int LHS;
    LHS = unchecked(RHS);
    assert(LHS == unchecked(RHS));
}
`
Verification of test006a succeeded.
Verification of test006b succeeded.
`
