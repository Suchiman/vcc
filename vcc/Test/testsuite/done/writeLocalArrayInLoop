#include <vcc2.h>

typedef __int32 INT32;
typedef unsigned __int8 UINT8;
typedef unsigned __int16 UINT16;
typedef unsigned __int32 UINT32;
typedef unsigned __int64 UINT64, *PUINT64;
typedef void VOID, *PVOID;

void foo()
  reads(set_empty())
{
    UINT64 bij[10];
    UINT64 i;

    for (i = 0; i < 10; i++)
      invariant(1)
    {
      bij[i] = i;
    }
}

`
Verification of foo succeeded.
`
#include <vcc2.h>

typedef union pte_t {
	struct {
		unsigned ppx:20;	
		unsigned v:1;	
		unsigned p:1;	
		unsigned reserved_9_0:10;	
	} f;			
	unsigned uint32;	
} pte_t;

unsigned *mm_4; 

void update_spt(unsigned i, unsigned j, unsigned k)
	requires(i<(8))
	requires(k <= (100))
	requires(j<=k)
	requires(is_thread_local_array((((union pte_t *) &mm_4[((33) + (((1)*(8)+(i))*(((100)>>10)+1)))<<10])), (((100))+1)*sizeof(unsigned)))
	writes(array_range((((union pte_t *) &mm_4[((33) + (((1)*(8)+(i))*(((100)>>10)+1)))<<10])), 100+1))
{
	pte_t hpte;
	unsigned l;

	l = j;
	while (l <= k) 
		invariant(j <= l && l <= k+1)
	{
		hpte.f.v = 0; 
		l++;
	}
}
`
Verification of update_spt succeeded.
`
