#include <vcc.h>

void foo()
{
  int a, b, c;
  assert(a > b && b > c);
}

void bar()
{
  int a, b, c;
  while (1)
  invariant(b > 0)
  invariant(a > b && b > c)
  {
    a  = b;
  }
}

void baz()
{
  spec( int m[int]; )
  spec( int n[int]; )

  spec(m = lambda(int i; 7); )

  assert(split_conjunctions(forall(int i; i > 0 ==> m[i] > 0 && n[i] < 0)));
}

void baz2()
{
  spec( int m[int]; )
  spec( int n[int]; )

  spec(m = lambda(int i; 7); )

  assert(split_conjunctions(forall(int i,j; m[j] > 0 && n[i] < 0)));
}


spec(
vcc(specmacro) 
bool And(bool a, bool b) returns(a && b);
)

void foo2()
{
  int a, b, c;
  assert(And(a > b, b > c && b > 0));
}

struct Node {
  int d;
  struct Node *next;
  struct Node *prev;
};

#define NULL 0

spec(vcc(specmacro)
bool nextClosed(bool S[struct Node *])
  returns(forall(struct Node *n; S[n] && n->next != NULL ==> S[n->next] && n->next->d < n->d)); )

void testQ(spec(bool s[struct Node *]))
{
  assert(nextClosed(s));
}

void testQ2(spec(bool s[struct Node *]))
{
  assert(split_conjunctions(nextClosed(s)));
}

spec(vcc(specmacro)
bool nextClosed2(bool S[struct Node *])
  returns(split_conjunctions(forall(struct Node *n; S[n] && n->next != NULL ==> S[n->next] && n->next->d < n->d))); )

void testQ3(spec(bool s[struct Node *]))
{
  assert(nextClosed2(s));
}


spec(vcc(specmacro)
bool nextClosed3(bool S[struct Node *])
  returns(forall(struct Node *n; S[n] && n->next != NULL ==> S[n->next] && n->next->d < n->d) &&
  forall(struct Node *n; S[n] && n->prev != NULL ==> S[n->prev] && n->prev->d < n->d)
  ); )

void testQN(spec(bool s[struct Node *]))
{
  assert(nextClosed3(s));
}

void testQN2(spec(bool s[struct Node *]))
{
  assert(split_conjunctions(nextClosed3(s)));
}

`
Verification of foo failed.
testcase(6,12) : error VC9500: Assertion 'a > b' did not verify.
testcase(6,21) : error VC9500: Assertion 'b > c' did not verify.
Verification of bar failed.
testcase(13,15) : error VC9500: Loop entry invariant 'b > 0' did not verify.
testcase(14,15) : error VC9500: Loop entry invariant 'a > b' did not verify.
testcase(14,24) : error VC9500: Loop entry invariant 'b > c' did not verify.
Verification of baz failed.
testcase(27,36) : error VC9500: Assertion 'i > 0 ==> n[i] < 0 in __forall(int i; i > 0 ==> m[i] > 0 && n[i] < 0)' did not verify.
Verification of baz2 failed.
testcase(37,36) : error VC9500: Assertion 'n[i] < 0 in __forall(int i,j; m[j] > 0 && n[i] < 0)' did not verify.
Verification of foo2 failed.
testcase(49,16) : error VC9500: Assertion 'a > b' did not verify.
testcase(42,1) : error VC9599: (related information) from expansion of 'And(a > b, b > c && b > 0)'.
testcase(49,23) : error VC9500: Assertion 'b > c' did not verify.
testcase(42,1) : error VC9599: (related information) from expansion of 'And(a > b, b > c && b > 0)'.
testcase(49,32) : error VC9500: Assertion 'b > 0' did not verify.
testcase(42,1) : error VC9599: (related information) from expansion of 'And(a > b, b > c && b > 0)'.
Verification of testQ failed.
testcase(66,12) : error VC9500: Assertion '__forall(struct Node *n; S[n] && n->next != 0 ==> S[n->next] && n->next->d < n->d)' did not verify.
testcase(62,24) : error VC9599: (related information) from expansion of 'nextClosed(s)'.
Verification of testQ2 failed.
testcase(71,36) : error VC9500: Assertion 'S[n] && n->next != 0 ==> S[n->next] in __forall(struct Node *n; S[n] && n->next != 0 ==> S[n->next] && n->next->d < n->d)' did not verify.
testcase(62,24) : error VC9599: (related information) from expansion of 'nextClosed(s)'.
testcase(71,36) : error VC9500: Assertion 'S[n] && n->next != 0 ==> n->next->d < n->d in __forall(struct Node *n; S[n] && n->next != 0 ==> S[n->next] && n->next->d < n->d)' did not verify.
testcase(62,24) : error VC9599: (related information) from expansion of 'nextClosed(s)'.
Verification of testQ3 failed.
testcase(80,12) : error VC9500: Assertion 'S[n] && n->next != 0 ==> S[n->next] in __forall(struct Node *n; S[n] && n->next != 0 ==> S[n->next] && n->next->d < n->d)' did not verify.
testcase(76,48) : error VC9599: (related information) from expansion of 'nextClosed2(s)'.
testcase(80,12) : error VC9500: Assertion 'S[n] && n->next != 0 ==> n->next->d < n->d in __forall(struct Node *n; S[n] && n->next != 0 ==> S[n->next] && n->next->d < n->d)' did not verify.
testcase(76,48) : error VC9599: (related information) from expansion of 'nextClosed2(s)'.
Verification of testQN failed.
testcase(92,12) : error VC9500: Assertion '__forall(struct Node *n; S[n] && n->next != 0 ==> S[n->next] && n->next->d < n->d)' did not verify.
testcase(86,24) : error VC9599: (related information) from expansion of 'nextClosed3(s)'.
testcase(92,12) : error VC9500: Assertion '__forall(struct Node *n; S[n] && n->prev != 0 ==> S[n->prev] && n->prev->d < n->d)' did not verify.
testcase(86,110) : error VC9599: (related information) from expansion of 'nextClosed3(s)'.
Verification of testQN2 failed.
testcase(97,36) : error VC9500: Assertion 'S[n] && n->next != 0 ==> S[n->next] in __forall(struct Node *n; S[n] && n->next != 0 ==> S[n->next] && n->next->d < n->d)' did not verify.
testcase(86,24) : error VC9599: (related information) from expansion of 'nextClosed3(s)'.
testcase(97,36) : error VC9500: Assertion 'S[n] && n->next != 0 ==> n->next->d < n->d in __forall(struct Node *n; S[n] && n->next != 0 ==> S[n->next] && n->next->d < n->d)' did not verify.
testcase(86,24) : error VC9599: (related information) from expansion of 'nextClosed3(s)'.
testcase(97,36) : error VC9500: Assertion 'S[n] && n->prev != 0 ==> S[n->prev] in __forall(struct Node *n; S[n] && n->prev != 0 ==> S[n->prev] && n->prev->d < n->d)' did not verify.
testcase(86,110) : error VC9599: (related information) from expansion of 'nextClosed3(s)'.
testcase(97,36) : error VC9500: Assertion 'S[n] && n->prev != 0 ==> n->prev->d < n->d in __forall(struct Node *n; S[n] && n->prev != 0 ==> S[n->prev] && n->prev->d < n->d)' did not verify.
testcase(86,110) : error VC9599: (related information) from expansion of 'nextClosed3(s)'.
`
