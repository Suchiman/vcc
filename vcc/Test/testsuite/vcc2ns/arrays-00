#include "vcc2test.h"

void setk2(int *p, size_t sz)
  requires(is_thread_local_array(p, sz))
  writes(array_range(p, sz))
{
  size_t i;

  i = 0;
  while (i < sz) 
    writes(array_range(p, sz))
    invariant (i >= 0)
  {
    p[i] = unchecked((int)i);
    i = i + 1;
  }
}

int sumup(int *p, size_t sz)
  requires(is_thread_local_array(p, sz))
{
  size_t i;
  int sum;

  sum = 0;
  i = 0;
  while (i < sz) 
    invariant (i >= 0)
  {
    sum = unchecked(sum + p[i]);
    i = i + 1;
  }

  return sum;
}

void setk(int *p, size_t sz)
  requires(is_thread_local_array(p, sz))
  writes(array_range(p, sz))
{
  size_t i;

  i = 0;
  while (i < sz) 
    // writes inherited from the function
    invariant (i >= 0)
  {
    p[i] = unchecked((int)i);
    i = i + 1;
  }
}

void setk3(int *p, size_t sz)
  requires(is_thread_local_array(p, sz))
  writes(array_range(p, sz))
  requires(sz > 0)
{
  size_t i;

  i = 0;
  while (i < sz - 1) 
    writes(array_range(p, sz - 1))
    invariant (i >= 0)
  {
    p[i] = unchecked((int)i);
    i = i + 1;
  }
}

void setk4(int *p, size_t sz, int **q)
  requires(is_thread_local_array(p, sz) && typed(q) && mutable(q))
  writes(array_range(p, sz), q)
  requires(sz > 0)
{
  size_t i;

  *q = (int*)NULL;

  i = 0;
  while (i < sz - 1) 
    writes(array_range(p, sz - 1))
    invariant (i >= 0)
  {
    p[i] = unchecked((int)i);
    i = i + 1;
  }

  assert(*q == NULL);
}

int foo()
{
  int *a;
  
  a = (int*)malloc(sizeof(int) * 10);
  if ( a != 0 ) {
    a[3] = 12;
    return unchecked(a[0] + a[1]);
  }
  return 0;
}

spec(
int fooSafe()
{
  int ^a; 
  a = spec_malloc_array<int>(10);
  a[3] = 12;
  return unchecked(a[0] + a[1]);
}
)
`
Verification of setk2 succeeded.
Verification of sumup succeeded.
Verification of setk succeeded.
Verification of setk3 succeeded.
Verification of setk4 succeeded.
Verification of foo succeeded.
Verification of fooSafe succeeded.
`
