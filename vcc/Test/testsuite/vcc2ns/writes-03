#include <stdlib.h>
#include <vcc.h>

typedef struct A {
  int x,y,z;
} A;

A *foo( A*p)
  writes(extent(p))
  requires(is_malloc_root(p))
  ensures(result == NULL || is_fresh(result))
  ensures(result == NULL || (typed(result) && mutable(result)))
{
  free(p);
  return malloc(sizeof(A));
}

void donothing();

void useA()
{
  A loc;
  A *p1 = malloc(sizeof(A));
  A *p2 = malloc(sizeof(A));
  A *t1, *t2;

  if (p1 != NULL && p2 != NULL) {
    donothing();
    t1 = foo(p1);
    if (t1 != NULL) {
      donothing();
      assert(p2 != t1);
      t2 = foo(p2);
      if (t2 != NULL) {
        donothing();
        assert(t1 != t2);
        assert(t1 != &loc);
        assert(t2 != &loc);
      }
    }
  }
}
`
Verification of foo succeeded.
Verification of useA succeeded.
`
