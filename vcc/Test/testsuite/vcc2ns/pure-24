#include "vcc.h"
typedef unsigned __int64 uint64;
typedef unsigned int uint;

spec (
    typedef struct vcc(record) Core{
        uint64 RIP;
        uint64 R[uint];
    } Core;
)

#define let(x, X, y, f) exists (X x; x == (y) && (f))

spec (
ispure bool mov_reg_excp(uint regidx, uint64 data, Core c)
    returns (regidx >= 8);
)

spec (
ispure Core mov_reg(uint regidx, uint64 data, Core c)
    requires (!mov_reg_excp(regidx, data, c))
    ensures
    (
        let (c1, Core, c / {.R = lambda(uint i; i < 8 ; i == regidx ? data : result.R[i])},
        result == c1)
    )
;
)

spec (
ispure Core mov_reg_f1(uint regidx, uint64 data, Core c)
    requires (!mov_reg_excp(regidx, data, c))
    ensures
    (
        let (c1, Core, c / {.R = lambda(uint i; i < 8 ; i == regidx ? data : c1.R[i])},
        result == c1)
    )
;
)

spec (
void test_mov_reg()
{
    Core c;
    c = mov_reg(1, 16, c);
    assert(c.R[1] == 16);
    c = mov_reg_f1(1, 16, c);
}
)
`
testcase(20,1) : warning VC9312: [possible unsoundness]: 'result' cannot be used in let binding in a pure function definition
testcase(31,1) : warning VC9310: [possible unsoundness]: a non-equality postcondition in a pure function (not ensures(result == ...))
Verification of test_mov_reg succeeded.
`
