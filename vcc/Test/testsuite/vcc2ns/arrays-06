#include "vcc.h"

typedef unsigned __int64 uint64;
struct CONC {
    int a;
    uint64   GPR[16];
    uint64   RIP;
 uint64  DebugR[8];
};
typedef struct X64_Core{
    uint64   R[16];     // general-purpose registers
    uint64   RIP;       // instruction pointer
 uint64  DR[8];  // debug registers
} X64_Core;
struct ABS {
    int a;
 int c;
 struct X64_Core core;
 invariant(keeps(&this->core))
};
struct DESC {
 int c;
 struct CONC *conc;
 spec(struct ABS abs;)
 invariant(keeps(this->conc, &this->abs))
 invariant(AbsConcRel(&this->abs,this->conc))
 invariant(this->c == this->abs.c)
};
 
spec(ispure
bool AbsConcRel(struct ABS ^abs, struct CONC *conc)
 reads(abs, conc)
 returns(abs->a == conc->a &&
      abs->core.RIP == conc->RIP &&
   forall(uint64 i; i < 16 ==> abs->core.R[i] == conc->GPR[i]) &&
   forall(uint64 i; i < 8 ==> abs->core.DR[i] == conc->DebugR[i])
   );
)
`
Verification of ABS#adm succeeded.
Verification of DESC#adm succeeded.
Verification of AbsConcRel#reads succeeded.
`
