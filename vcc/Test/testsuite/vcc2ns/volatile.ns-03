#include <vcc.h>
#include <limits.h>
typedef unsigned int UINT;

typedef _(claimable) struct Client {
	volatile bool flag;					// true when choosing a ticket
	_(ghost \object bakery;)					// the bakery this client is in
	_(invariant \on_unwrap(\this, \inv(bakery)))				// don't destroy the client while the bakery is running
	_(invariant \approves(\this->\owner,flag))
	_(invariant \approves(bakery,flag))	// changes to the fields require checking the bakery invariants
} Client;

typedef _(claimable) _(dynamic_owns) struct Bakery {
	UINT N;						// number of clients
	Client *c;					// pointer to array of clients
	_(invariant \forall UINT i; i<N ==> (&c[i])->\closed  && (&c[i])->\valid && (c[i].bakery==\this))
} Bakery;

#define cl (&server->c[idx])	// defined rather than declared as a local so we can use it in the contract (replace with let someday)

void BakeryAcquire(Bakery *server, UINT idx _(ghost \claim sc))
_(requires \wrapped(sc) && \claims(sc,server->\closed))  // need evidence that nobody will destroy the server
_(requires idx < server->N && \wrapped(cl))			// must own a client of the server
_(writes cl)
{	
	_(atomic sc,server,cl) {
		cl->flag = 1;
		_(bump_volatile_version cl)
	}
}
`
Verification of Client#adm succeeded.
Verification of Bakery#adm succeeded.
Verification of BakeryAcquire succeeded.
`
