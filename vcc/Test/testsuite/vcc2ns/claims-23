#include <vcc.h>

#define NULL ((void *)0)

typedef __int32 INT32;

typedef struct vcc(claimable) vcc(volatile_owns) _RTL_SPIN_LOCK
{
    volatile INT32 Lock;
    spec(volatile obj_t protected_obj;)
    invariant(protected_obj!=NULL ==> (Lock == 0 || Lock == 1))
    invariant(old(protected_obj)!=NULL ==> unchanged(protected_obj))
    invariant(!Lock && protected_obj!=NULL ==> set_in(protected_obj, owns(this)))

} RTL_SPIN_LOCK, *PRTL_SPIN_LOCK;

void
RtlAcquireSpinLock(
    PRTL_SPIN_LOCK SpinLock
    claimp(c)
    )
    always(c,closed(SpinLock) && SpinLock->protected_obj!=NULL)
    ensures(wrapped(SpinLock->protected_obj))
    ensures(is_fresh(SpinLock->protected_obj))
    ;


struct S {
  int a;
};

struct T {

  struct S s;
  RTL_SPIN_LOCK L;
  spec(claim_t Claim;)
  
  invariant(keeps(&L, Claim))
  invariant(claims(Claim, closed(&L) && L.protected_obj == &s))
};

void foo(struct T *p claimp(c))
  always(c, closed(p))
{
  assert(claims_claim(c, p->Claim));
  RtlAcquireSpinLock(&p->L spec(c));
}


`
Verification of _RTL_SPIN_LOCK#adm succeeded.
Verification of T#adm succeeded.
Verification of foo succeeded.
`
