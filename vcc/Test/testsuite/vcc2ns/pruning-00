`/functions:foo /a
#include <vcc.h>

typedef unsigned __int32 UINT32;

spec(typedef bool BITMAP32[UINT32];)

spec(
ispure BITMAP32 ToBm32(UINT32 n); 
)

spec(
ispure BITMAP32 Bm32Singleton(UINT32 i) ensures(result == lambda(UINT32 j; true; j == i));
)

spec(
ispure BITMAP32 Bm32Union(BITMAP32 bm1, BITMAP32 bm2)  ensures(result == lambda(UINT32 i; i < 32; bm1[i] || bm2[i]));
)

spec(
ispure BITMAP32 Bm32Intersect(BITMAP32 bm1, BITMAP32 bm2)
  ensures(result == lambda(UINT32 i; i < 32; bm1[i] && bm2[i]));
)

spec(
ispure BITMAP32 Bm32SymmetricDiff(BITMAP32 bm1, BITMAP32 bm2)
  ensures(result == lambda(UINT32 i; i < 32; bm1[i] != bm2[i]));
)

spec(
ispure bool Bm32SpecialValue(UINT32 bm)
  ensures(result == true);
)

axiom(forall(UINT32 i; { ToBm32(0)[i] } i < 32 ==> !ToBm32(0)[i]));
axiom(forall(UINT32 i; { ToBm32((UINT32)-1)[i] } i < 32 ==> ToBm32((UINT32)-1)[i]));
axiom(forall(UINT32 i; { ToBm32(1UI32 << i)[i] } i < 32 ==> ToBm32(1UI32 << i) == Bm32Singleton(i)));
axiom(forall(UINT32 x; {Bm32SpecialValue(x)} forall(UINT32 i; i < 32 ==> !ToBm32(x)[i]) ==> x == 0));
axiom(forall(UINT32 x; {Bm32SpecialValue(x)} forall(UINT32 i; i < 32 ==> ToBm32(x)[i]) ==> x == (UINT32)-1));
axiom(forall(UINT32 x,y; { ToBm32(x & y) } ToBm32(x & y) == Bm32Intersect(ToBm32(x), ToBm32(y))));
axiom(forall(UINT32 x,y; { ToBm32(x | y) } ToBm32(x | y) == Bm32Union(ToBm32(x), ToBm32(y))));
axiom(forall(UINT32 x,y; { ToBm32(x ^ y) } ToBm32(x ^ y) == Bm32SymmetricDiff(ToBm32(x), ToBm32(y))));
axiom(forall(UINT32 x, i; i < 32 ==> ToBm32(x)[i] <==> (x & (1UI32 << i)) != 0));


void foo() {
  assert(forall(UINT32 i; i < 32 ==> !(ToBm32(0)[i])));
}
`
Verification of foo succeeded.
`
