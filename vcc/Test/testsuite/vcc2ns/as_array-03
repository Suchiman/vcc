#include "vcc.h"

spec(typedef unsigned map_t[unsigned];)

spec(ispure map_t upd(map_t m,unsigned y)
    returns(lambda(unsigned x; true; x==y ? 0 : m[x]));)

spec(ispure map_t abs(unsigned *m, unsigned z)
    reads(set_universe())
    returns(lambda(unsigned x; true; x < z ? m[x] : 0));)

void trg(unsigned *m, unsigned z)
    requires(z)
    requires(typed((unsigned[z])m))
    writes(m+0)
{
    m[0] = 0;
    assert(abs(m,z)==upd(old(abs(m,z)),0));
}

spec(typedef struct vcc(record) x { map_t m; } rec_t;)

spec(ispure rec_t rec_upd(rec_t r,unsigned y)
    returns(r / { .m = lambda(unsigned x; true; x==y ? 0 : r.m[x]) });)

spec(ispure rec_t rec_abs(unsigned *m, unsigned z)
    reads(set_universe())
    returns((rec_t) { .m = lambda(unsigned x; true; x < z ? m[x] : 0) });)

void trg2(unsigned *m, unsigned z)
    requires(z)
    requires(typed((unsigned[z])m))
    writes(m+0)
{
    m[0] = 0;
    //assert(rec_abs(m,z).m==rec_upd(old(rec_abs(m,z)),0).m);
    assert(rec_abs(m,z)==rec_upd(old(rec_abs(m,z)),0));
}
`
Verification of trg succeeded.
Verification of trg2 succeeded.
`
