#include <vcc.h>

struct A {
  int x;
  int y;
};

struct B {
  struct A a;
  invariant(keeps(&a))
};

struct C {
  struct B b;
  int z;
  invariant(keeps(&b))
};

void up1(int sw, struct B *b)
  writes(b)
  maintains(wrapped(b))
  ensures(sw ==> domain_updated_at(b, SET(&b->a.x)))
  ensures(!sw ==> domain_updated_at(b, SET(&b->a.y)))
{
  if (sw) {
    skinny_expose(b, &b->a)
      writes(&b->a.x)
    {
      b->a.x = 1;
    }
  } else {
    skinny_expose(b, &b->a)
      writes(&b->a.y)
    {
      b->a.y = 1;
    }
  }
}

void up2(struct C *c)
  writes(c)
  requires(wrapped(c))
  // note that &c->b is hidden from the set, as it is non-primitive
  ensures(domain_updated_at(c, SET(&c->b.a.x, &c->z)))
{
  skinny_expose(c)
    writes(&c->b.a.x, &c->b)
  {
    up1(1, &c->b);
  }

  skinny_expose(c)
    writes(&c->z)
  {
    c->z = 12;
  }
}

void up3(struct C *c)
  writes(c)
  requires(wrapped(c))
  ensures(domain_updated_at(c, SET(&c->b.a.x, &c->z)))
{
  skinny_expose(c)
    writes(&c->b.a.x, &c->z, &c->b)
  {
    up1(1, &c->b);
    c->z = 12;
  }
}

void up4(struct C *c)
  writes(c)
  requires(wrapped(c))
  ensures(domain_updated_at(c, SET(&c->b.a.x, &c->z)))
{
  skinny_expose(c)
    writes(&c->b.a.x, &c->z, &c->b)
  {
    c->z = 12;
    up1(1, &c->b);
  }
}

void up5(struct C *c)
  writes(c)
  requires(wrapped(c))
  ensures(domain_updated_at(c, SET(&c->b.a.x, &c->z)))
{
  skinny_expose(c)
    writes(&c->b.a.x, &c->z, &c->b)
  {
    c->z = 12;
    up1(1, &c->b);
    c->z = 13;
  }
}

void up6(struct C *c)
  writes(c)
  requires(wrapped(c))
  ensures(domain_updated_at(c, SET(&c->b.a.x, &c->b.a.y)))
{
  skinny_expose(c)
    writes(&c->b.a.x, &c->b.a.y, &c->b)
  {
    up1(1, &c->b);
    up1(0, &c->b);
  }
}

`
Verification of B#adm succeeded.
Verification of C#adm succeeded.
Verification of up1 succeeded.
Verification of up2 succeeded.
Verification of up3 succeeded.
Verification of up4 succeeded.
Verification of up5 succeeded.
Verification of up6 succeeded.
`
