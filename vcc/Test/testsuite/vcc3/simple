#include <vcc.h>

struct vcc(dynamic_owns) A {
  int x;
  invariant(x > 0)
};


void foo(struct A *a) {
}
`
Verification of A#adm succeeded.
Verification of foo succeeded.
`
#include <vcc.h>

struct vcc(dynamic_owns) A {
  int x;
  invariant(x > 0)
};

struct vcc(dynamic_owns) B {
  struct A *a;
  int y;
  invariant(keeps(a))
  invariant(a->x > y)
};

struct vcc(dynamic_owns) C {
  struct A *a;
  int y;
  invariant(a->x > y)
};


void foo(struct B *a, struct C *c) {
}
`
Verification of A#adm succeeded.
Verification of B#adm succeeded.
Verification of C#adm failed.
testcase(18,15) : error VC8012: invariant(a->x > y) of C is not admissible.
Verification of foo succeeded.
`
#include "vcc.h"


struct vcc(dynamic_owns) A {
  int a;
  int b[10];

  invariant(a > 0)
  invariant(b[0] > 0)
  invariant(b[1] > 0)
};


struct vcc(dynamic_owns) A_wrong1 {
  int a;
  int b[10];

  invariant(b[10] > 0)
};

struct vcc(dynamic_owns) A_wrong2 {
  int a;
  int b[5];

  invariant(b[10] > 0)
};


void foo(struct A *x)
  requires(wrapped(x))
  writes(x)
{
  
  unwrap(x);
  x->a = 10;
  x->b[0] = 10;
  x->b[1] = 10;
  wrap(x);
}

void fooWrong1(struct A *x)
  requires(wrapped(x))
  writes(x)
{
  
  unwrap(x);
  x->b[10] = 10;
  x->b[11] = 10;
  x->b[-1] = 10;
  wrap(x);
}
`
Verification of A#adm succeeded.
Verification of A_wrong1#adm failed.
testcase(18,15) : error VC8012: invariant(b[10] > 0) of A_wrong1 is not admissible.
Verification of A_wrong2#adm failed.
testcase(25,15) : error VC8012: invariant(b[10] > 0) of A_wrong2 is not admissible.
Verification of foo succeeded.
Verification of fooWrong1 failed.
testcase(47,3) : error VC8507: Assertion 'x->b[10] is writable' did not verify.
testcase(48,3) : error VC8507: Assertion 'x->b[11] is writable' did not verify.
testcase(49,3) : error VC8507: Assertion 'x->b[-1] is writable' did not verify.
`
#include <vcc.h>

struct A {
  int a;
  int b;
};

struct B {
  struct A x;
  struct A y;
  int z;
};

void foo()
{
  struct B *b, *c;

  assert(set_in(&b->z, extent(b)));
  assert(set_in(&b->x, extent(b)));
  assert(set_in(&b->x.a, extent(b)));
  assert(set_in(&b->y, extent(b)));
  assert(set_in(&b->y.b, extent(b)));

  assert(set_in(&b->y.b, extent(c)));
}
`
Verification of foo failed.
testcase(24,12) : error VC9500: Assertion '_vcc_set_in(&b->y.b,_vcc_extent(c))' did not verify.
`
